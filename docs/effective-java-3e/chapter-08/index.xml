<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>8장 일반적인 프로그래밍 원칙 on &lt;Qubqub/&gt;</title>
    <link>https://qubqub.github.io/effective-java-3e/chapter-08/</link>
    <description>Recent content in 8장 일반적인 프로그래밍 원칙 on &lt;Qubqub/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 May 2021 10:11:42 +0900</lastBuildDate><atom:link href="https://qubqub.github.io/effective-java-3e/chapter-08/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[아이템 57] 지역변수의 범위를 최소화하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item57/</link>
      <pubDate>Sun, 02 May 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item57/</guid>
      <description>[아이템 57] 지역변수의 범위를 최소화하라. 지역변수의 범위는 가능한 좁히는 게 좋습니다. 가장 좋은 방법은 선언과 동사에 초기화 해주는 것입니다. 초기화에 필요한 정보가 없다면 정보가 주어질 때까지 선언을 미루는 것입니다.. 물론 try-catch문은 이 규칙에서 예외입니다. try 블록 안에서 초기화해야하고 밖에서도 쓰일 경우 try 블록 앞에서 선언해야 합니다.

이러한 지역변수 초기화는 대표적으로 for (for-each), while로 비교할 수 있습니다.
1 2 3 4  // 컬렉션이나 베열을 순회하는 권장 관용구 for (Element e : c) { .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item58/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item58/</guid>
      <description>[아이템 58] 전통적인 for 문보다는 for-each를 사용하라. for 문은 코드가 장황해질 수 있고, 요소 종류가 늘어날 수록 오류가 생길 가능성이 있습니다. for-each (정식명칭 향상된 for문)은 이러한 단점들을 해결해줄 수 있습니다.
1 2 3  for (Element e : elements) { .... // e로 무언가를 한다. }   컬렉션을 중첩해서 사용하면 for-each 문의 이점은 더욱 커집니다.
1 2 3 4 5 6 7 8 9 10 11 12 13  // 버그를 찾아보자 enum Suit { CLUB, DIAMOND, HEART, SPADE } enum Rank { ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING } .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item59/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item59/</guid>
      <description>[아이템 59] 라이브러리를 익히고 사용하라. 0부터 명시한 수 까지 무작위 정수를 하나 생성하려고 합니다. 다음은 흔히 마주할 수 있는 문제있는 메서드입니다.
1 2 3 4 5  static Random ran = new Randon(); static int random(int n) { return Math.abs(ran.nextInt()) % n; }   이 코드에는 세 가지 문제점이 있습니다. 첫 번째. n이 그리 크지 않은 2의 제곱수라면 얼마 지나지 않아 같은 수열이 반복됩니다. 두 번째, n이 2의 제곱수가 아니라면 몇몇 숫자가 평균적으로 더 반복됩니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item60/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item60/</guid>
      <description>[아이템 60] 정확한 답이 필요하다면 float와 double은 피하라. float와 dobule은 과학과 공학 계산용으로 설계 되었습니다. 이진 부동소수점 연산에 쓰이며, 넓은 범위의 수를 빠르게 정밀한 &amp;lsquo;근사치&amp;rsquo;로 계산하도록 설계되었습니다. 따라서 정확한 계산 결과가 필요할 때는 사용하면 안 됩니다. 특 히 금용 관련 계산과 맞지 않습니다. 0.1 혹은 10의 음의 거듭 제곱수(10^-1, 10-^2)를 표현할 수 없기 때문입니다.
예를 들어 1.03달러에서 42센트를 사용하고 남은 돈을 계산한다고 가정해봅시다.
1  System.out.println(1.03 - 0.42);   이 코드는 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item61/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item61/</guid>
      <description>[아이템 61] 박싱된 기본 타입보다는 기본 타입을 사용하라. 자바의 데이터 타입은 기본형과 참조형이 있습니다. 기본형에 대응하는 참조 타입이 하나씩 있으며 이를 박싱된 기본 타입이라 합니다. 기본 타입과 박싱된 기본 타입은 분명한 차이가 있으며 용도에 맞게 사용해야합니다.
박싱된 기본 타입은 값 뿐만 아니라 식별성이 더해졌습니다. 즉 값이 같아도 서로 다르게 식별될 수 있습니다. 그리고 박싱 타입은 null을 가질 수 있습니다. 추가로 기본 타입은 박싱 타입보다 메모리와 시간 측면에서 더 효율적입니다.
1 2 3  // 잘못 구현된 비교자 Comparator&amp;lt;Integer&amp;gt; naturalOrder = (i, j) -&amp;gt; (i &amp;lt; j) ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item62/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item62/</guid>
      <description>[아이템 62] 다른 타입이 적절하다면 문자열 사용을 피하라. 문자열은 다른 값 타입을 대신하기엔 적절하지 않습니다.
1 2  // 흔한 타입을 문자열로 처리한 부적절한 예 String compoundKey = className + &amp;#34;#&amp;#34; + i.next();   두 요소를 구분해주는 #이 두 요소 중 하나에서 쓰였다면 혼란을 초래할 수 있습니다. 각 요소를 개별로 접근하려면 문자열을 파싱해야 해서 느리고, 귀찮고, 오류 가능성도 커집니다. 이럴 경우 전용 클래스를 새로 만드는 편이 낫습니다. 보통 private 정적 멤버 클래스로 선언합니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item63/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item63/</guid>
      <description># [아이템 63] 문자열 연결은 느리니 주의하라. 문자열 연결 연산자로 문자열을 n개를 잇는 시간은 n^2에 비례합니다. 문자열은 immutable이라 두 문자열을 연결할 경우 양쪽의 내용을 모두 복사해야 하므로 성능 저하는 피할 수 없습니다.
1 2 3 4 5 6 7  public String statement() { String result = &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; numItems(); i++) { result += lineForItem(); // 문자열연결  } return result; }   StringBuilder를 활용하면 성능을 크게 개선할 수 있습니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item64/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item64/</guid>
      <description>[아이템 64] 객체는 인터페이스를 사용해 참조하라. 1 2  // 좋은 예 Set&amp;lt;Student&amp;gt; student = new HashSet&amp;lt;&amp;gt;();   1 2  // 나쁜 예. 클래스 참조 HashSet&amp;lt;Student&amp;gt; student = new HashSet&amp;lt;&amp;gt;();   인터페이스를 활용하면 유연함을 얻을 수 있습니다. 구현체를 교체하고 싶으면 구현 클래스만 바꾸면 됩니다.
1 2  // HashSet -&amp;gt; LinkedHashSet 교체 Set&amp;lt;Student&amp;gt; student = new LinkedHashSet&amp;lt;&amp;gt;();   하지만 구현체를 바꿀 경우 주의할 점이 있습니다. 기존 구현체만의 특별한 기능을 제공하는 게 있다면, 바꿀 구현체에도 있는지 혹은 사이드 이펙트도 충분히 고려해야 합니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item65/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item65/</guid>
      <description>[아이템 65] 리플렉션보다는 인터페이스를 사용하라. 리플렉션 기능을 활용하면 클래스에 접근 할 수 있습니다. Class객체가 주어지면 생성자, 메서드, 필드에 해당하는 Consturct, Method, Field 인스턴스를 가져올 수 있고 그 인스턴스들로는 그 클래스의 시그니처 등을 가져올 수 있습니다.

Method.invoke는 어떤 클래스의 어떤 객체가 가진 어떤 메서드라도 호출할 수 있게 해줍니다 물론 장점만있는 건 아닙니다. 단점은 다음과 같습니다.
 컴파일타임 타입 검사가 주는 이점을 하나도 누릴 수 없다. 예외 검사도 마찬가지입니다. 리플렉션 기능으로 존재하지 않는 혹은 접근할 수 없는 메서드를 호출하려고하면 런타임 오류가 발생합니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item66/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item66/</guid>
      <description>[아이템 66] 네이티브 메서드는 신중히 사용하라. 자바 네이티브 인터페이스는 자바 프로그램이 네이티브 메서드를 호출하는 기술입니다. 네이티브 메서드란 C나 C++같읕 네이비티브 프로그래밍 언어로 작성한 메서드를 말합니다. 네이티브 메서드의 주요 쓰임은 세 가지가 있습니다.
 레지스트리 같은 플랫폼 특화 기능을 사용한다. 네이티브 코드로 작성된 기존 라이브러리를 사용한다. 성능 개선을 목적으로 성능에 결정적인 영향을 주는 영역만 따로 네이티브 언어로 작성한다.  자바 9부터는 process API를 추가해 OS 프로세스에 접근하는 길을 열어주었고 자바에서 네이티브 메서드를 사용할 필요가 점점 줄어드는 추세입니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item67/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item67/</guid>
      <description>[아이템 67] 최적화는 신중히 하라. 최적화는 좋은 결과보다 해로운 결과로 이어지기 쉽고, 자칫하면 빠르지도 않고 제대로 동작하지 않는 소프트웨어를 탄생시키는 것과 같습니다. 그러므로 최적화 할때는 득과실을 잘 생각해봐야 합니다.
성능을 제한하는 설계를 피하라 완성 후 변경하기가 가장 어려운 설계 요소는 바로 컴포넌트끼리 혹은 외부 시스템과의 소통 방식입니다. 대표적으로 API, 네트워크 프로토콜 등이 있습ㄴ디ㅏ. 이런 설계 요소들은 완성 후에는 변경하기 어려우며 동시에 시스템 성능을 심각하게 제한할 수 있습니다.
API 설계할 때 성능에 주는 영향을 고려하라.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item68/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item68/</guid>
      <description>[아이템 68] 일반적으로 통용되는 명명 규칙을 따르라. 자바이 명명 규칙은 크게 철자와 문법, 두 범주로 나뉘고 명명 규칙을 지켜야 좋은 프로그래밍이 될 수 있습니다. 대표적으로 메서드와 필드 내임의 첫 글자는 소문자를 사용합니다. 하지만 상수 필드의 경우 예외입니다. 상수는 모두 대무자를 이용하며 단어 사이는 _로 구분 합니다. ex)MAX_VALUE.. 상수 필드는 값이 static final 필드를 말합니다. 타입 매개변수 같은 경우 한 문자로 표현되며, 임의의 타입에는 T를, 컬렉션 원소의 타입은 E, 맵의 키와 값에는 K, V를, 예외는 X, 메서드의 반환 타입에는 R을 사용합니다.</description>
    </item>
    
  </channel>
</rss>
