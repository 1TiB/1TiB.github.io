<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>4장 제네릭 on &lt;Qutrits/&gt;</title>
    <link>https://qutrits.github.io/effective-java-3e/chapter-04/</link>
    <description>Recent content in 4장 제네릭 on &lt;Qutrits/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 09 Jul 2020 18:21:51 +0900</lastBuildDate><atom:link href="https://qutrits.github.io/effective-java-3e/chapter-04/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[아이템 33] 타입 안전 이종 컨테이너를 고려하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item33/</link>
      <pubDate>Thu, 09 Jul 2020 18:21:51 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item33/</guid>
      <description>[아이템 33] 타입 안전 이종 컨테이너를 고려하라. 타입 안전 이종 컨테이너 패턴이란 키를 매개변수화한 다음, 컨테이너에 값을 넣거나 뺄 때 매개변수화한 키를 함께 제공하는 방식입니다.
1 2 3 4 5 // 타입 안전 이종 컨테이너 패턴 - API public class Favorites { public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance); public &amp;lt;T&amp;gt; getFavorite(Class&amp;lt;T&amp;gt; type); } 다음은 Favorite 클래스를 사용하는 예시입니다.
1 2 3 4 5 6 7 8 9 10 // 타입 안전 이종 컨태이너 패턴 - 클라이언트 Favorites f = new Favorites(); f.</description>
    </item>
    
    <item>
      <title>[아이템 32] 제네릭과 가변인수를 함께 쓸 때는 신중하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item32/</link>
      <pubDate>Thu, 09 Jul 2020 16:12:48 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item32/</guid>
      <description>[아이템 32] 제네릭과 가변인수를 함께 쓸 때는 신중하라. 가변인수와 제네릭은 자바 5에 함께 추가되었는데 이 둘은 서로 어울리지 않습니다.
가변인수(varargs)란 메서드에 넘기는 인수의 개수를 클라이언트가 조절할 수 있게 해주는 것입니다. 구현 방식에 허점이 있습나다. 가변인수 메서드를 호출하면 가변인수를 담기 위한 배열이 자동으로 하나 만들어집니다. 그런데 내부로 감춰야 했을 이 배열을 그만 클라이언트에 노출하는 문제가 생겼습니다. 그 결과 verargs 매개변수에 제네릭이나 매개변수화 타입이 포함되면 알기 어려운 컴파일 경고가 발생합니다.
실체화 불가 타입은 런타임에 컴파일보다 타입 관련 정보를 적게 담고 있습니다.</description>
    </item>
    
    <item>
      <title>[아이템 31] 한정적 와일드카드를 사용해 API 유연성을 높여라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item31/</link>
      <pubDate>Thu, 09 Jul 2020 13:42:19 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item31/</guid>
      <description>[아이템 31] 한정적 와일드카드를 사용해 API 유연성을 높여라. 때론 불공변 방식보다 유연한 무언가가 필요할 때가 있습니다.
아이템29의 Stack 클래스를 떠올려보면
1 2 3 4 5 6 public class Stack&amp;lt;T&amp;gt; { public Stack(); public void push (E e); public E pop(); public boolean isEmpty(); } 여기서 일련의 원소를 스택에 넣는 메서드를 추가한다고 하면
1 2 3 4 5 public void pushAll(Iterable&amp;lt;E&amp;gt; src) { for (E e : src) { push(e); } } Iterable src의 원소 타입의 스택의 원소 타입과 일치하면 잘 작동합니다.</description>
    </item>
    
    <item>
      <title>[아이템 30] 이왕이면 제네릭 메서드로 만들라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item30/</link>
      <pubDate>Thu, 09 Jul 2020 10:24:41 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item30/</guid>
      <description>[아이템 30] 이왕이면 제네릭 메서드로 만들라. 제네릭 메서드는 대표적으로 Collections의 알고리즘 메서드(binarySearch, sort 등..)가 있습니다. 사용 방법은 리턴타입 앞에다 타입을 명시해주면 됩니다. 다음은 두 집합의 합집합을 반환하는 문제가 있는 메서드입니다.
1 2 3 4 5 6 // raw tyoe 사용 - 수용 불가 public static Set union(Set s1, Set s2) { Set result = new HashSet(s1); result.addAll(s2); return result; } 컴파일은 되지만 경고가 발생합니다. 경고를 없애려면 이 메서드 타입을 안전하게 만들어야 합니다.</description>
    </item>
    
    <item>
      <title>[아이템 29] 이왕이면 제네릭 타입으로 만들라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item29/</link>
      <pubDate>Wed, 08 Jul 2020 16:53:15 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item29/</guid>
      <description>[아이템 29] 이왕이면 제네릭 타입으로 만들라. 아이템7에서 다루었던 스택 코드를 제네릭으로 변형한 코드입니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Stack&amp;lt;E&amp;gt; { private E[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY]; // 경고 메세지 타입이 안전하지 않음 } public void push(E e) { ensoureCapaciy(); elements[size++] = e; } public E pop() { if (size == 0) { throw new EmptyStackException(); } E result = elements[--size]; elements[size] = null; return result; } .</description>
    </item>
    
    <item>
      <title>[아이템 28] 배열보다는 리스트를 사용하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item28/</link>
      <pubDate>Wed, 08 Jul 2020 14:21:51 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item28/</guid>
      <description>[아이템 28] 배열보다는 리스트를 사용하라. 배열과 제네릭 타입의 차이 첫번째 차이점. 배열은 공변 입니다. 어려워 보이는 단어지만 뜻은 간단합니다. Sub가 Super의 하위 타입이라면 배열 Sub[]는 배열 Super[]의 하위 타입이 됩니다.
반면, 제네릭은 불공변입니다. 즉 서로 다른 타입 Type1과 Type2가 있을 때, List&amp;lt;Type1&amp;gt;은 List&amp;lt;Type2&amp;gt;의 하위 타입도 아니고 상위 타입도 아닙니다.
이것만 보면 제네릭에 문제가 있다고 생각할 수 있지만, 사실 문제가 있는 건 배열 쪽입니다. 다음은 문법상 허용되는 코드입니다.
1 2 3 // 런타임 에러 Object[] objectArray = new Long[1]; objectArray[0] = &amp;#34;타입이 달라 넣을 수 없다.</description>
    </item>
    
    <item>
      <title>[아이템 27] 비검사 경고를 제거하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item27/</link>
      <pubDate>Wed, 08 Jul 2020 13:16:11 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item27/</guid>
      <description>[아이템 27] 비검사 경고를 제거하라. 제네릭에 관련된 수 많은 컴파일 경고들이 있습니다. 비검사 형변환 경고, 비검사 메서드 호출 경고, 비검사 매개변수화 가변인수 타입 경고, 비검사 변환 경고 등이 있습니다.
제네릭에 익숙해질 수록 마주치는 경고 수는 줄어들겠지만 새로 작성한 코드가 한 번에 깨끗하게 컴파일되리라 기대하지는 맙시다.
대부분의 비검사 경고는 쉽게 제거할 수 있습니다. 코드를 다음처럼 잘못 작성했다고 예시를 들어봅시다.
1 Set&amp;lt;Fruits&amp;gt; fruits = new Hashset(); 그러면 컴파일러는 무엇이 잘못 됐는지 설멸해 줄 것입니다.</description>
    </item>
    
    <item>
      <title>[아이템 26] Raw 타입은 사용하지 마라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-04/item26/</link>
      <pubDate>Tue, 07 Jul 2020 11:41:27 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-04/item26/</guid>
      <description>[아이템 26] Raw 타입은 사용하지 마라. raw type이란 제네릭 타입에서에서 타입 파라미터를 전혀 사용하지 않았을 때를 말합니다.
1 2 // raw type List list = new ArrayList(); raw type은 타입 선언에서 제네릭 타입 정보가 전부 지워진 것처럼 동작하는데, 제네릭이 도래하기 전 코드와 호환성을 위해서 주로 존재합니다.
1 2 // 문자열을 저장하는 컬렉션 private final List names = new ArrayList(); 위 코드를 사용하면 String대신 다른 타입을 넣어도 오류없이 실행됩니다. (경고 메세지를 보여주긴 합니다.</description>
    </item>
    
  </channel>
</rss>
