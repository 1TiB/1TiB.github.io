<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>1장 객체 생성과 파괴 on &lt;Qutrits/&gt;</title>
    <link>https://qutrits.github.io/effective-java-3e/chapter-01/</link>
    <description>Recent content in 1장 객체 생성과 파괴 on &lt;Qutrits/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 20 Jun 2020 17:12:16 +0900</lastBuildDate><atom:link href="https://qutrits.github.io/effective-java-3e/chapter-01/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[아이템 9] try-finally보다는 try-with-resources를 사용하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item9/</link>
      <pubDate>Sat, 20 Jun 2020 17:12:16 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item9/</guid>
      <description>자바 라이브러리에는 InputStream, OutputStream, java.sql.Connection과 같이 직접 close를 해야 하는 자원들이 있습니다.
클라이언트는 실수로 자원을 닫아주지 않는 경우 예상치 못한 성능 문제로 이어질 수 있습니다.
📌 실수를 유발할 수 있는 기존 코드 1 2 3 4 5 6 7 8 9  static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally { br.close(); } } }   나쁘진 않지만 자원을 더 사용하게 되면 실수가 나올 가능성이 큽니다.</description>
    </item>
    
    <item>
      <title>[아이템 8] finalizer와 cleaner 사용을 피하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item8/</link>
      <pubDate>Sat, 20 Jun 2020 15:12:33 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item8/</guid>
      <description>자바에서는 두 가지 객체 소멸자를 제공합니다. 바로 finalizer와 cleaner입니다. finalizer는 예측 불가능하며 일반적으로 불필요하며 오작동 낮은 성능과 같은 문제점들이 있습니다. JAVA 9부터는 사용 자제deprecated API로 지정했습니다.
cleaner는 finalizer보다 덜 위험하지만 이 역시 예측 불가능하고, 느리고 일반적으로 불필요합니다.
📌 언제 실행되는지 알 수가 없습니다. finalizer와 cleaner는 즉시 실행된다는 보장이 없습니다. 즉 제때 실행되어야 하는 작업을 절대 할 수 없다는 뜻입니다.
📌 finalizer는 굉장히 lazy합니다. 여기서 lazy하다는 뜻은 인스턴스의 자원 회수가 멋대로 지연될 수 있다는 뜻입니다.</description>
    </item>
    
    <item>
      <title>[아이템 7] 다 쓴 객체 참조를 해제하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item7/</link>
      <pubDate>Sat, 20 Jun 2020 12:15:43 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item7/</guid>
      <description>메모리 누수가 일어나는 예제 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  public class Stack { private Object[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = new Object[DEFAULT_INITIAL_CAPACITY]; } public void push(Object e) { ensureCapacity(); elements[size++] = e; } public Object pop() { if (size == 0) throw new EmptyStackException(); return elements[--size]; // 주의  } private void ensureCapacity() { if (elements.</description>
    </item>
    
    <item>
      <title>[아이템 6] 불필요한 객체를 생성을 피하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item6/</link>
      <pubDate>Fri, 19 Jun 2020 18:33:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item6/</guid>
      <description>기능이 똑같은 객체를 매번 생성하기 보다는 객체를 재사용하는 것이 적절합니다. 특히 불변 객체는 항상 재사용할 수 있습니다.
📌 문자열 생성 방법 객체 생성 방식 - 피해야 되는 예시 1  String str = new String(&amp;#34;hello&amp;#34;);   이 방식을 이용하면 똑같은 문자열을 생성하더라도 항상 새로운 객체를 생성하므로 낭비가 됩니다.
리터럴 방식 1  String str = &amp;#34;hello&amp;#34;;   리터럴 방식을 사용하면 JVM에서 동일한 문자열이 존재한다면 그 리터럴을 재사용합니다.
📌 생성 비용이 비싼 객체 생성 비용이 비싼 객체들 같은 경우 캐싱해서 재사용할 수 있는 방법을 고려해보는 게 좋습니다.</description>
    </item>
    
    <item>
      <title>[아이템 5] 자원을 직접 명시하지 말고 의존객체를 주입을 사용하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item5/</link>
      <pubDate>Fri, 19 Jun 2020 17:15:21 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item5/</guid>
      <description>대부분의 클래스는 하나 이상의 리소스에 의존합니다. 이번 예제 코드는 SpellChecker가 Lexicon을 의존하고 있는 모습입니다.
부적절한 구현 📌 정적 유틸리티를 잘못 사용한 예 &amp;lt; 유연하지 않고 테스트할 수 없다 &amp;gt; 1 2 3 4 5 6 7 8 9 10  public class SpellChecker { private static final Lexicon dictionary = ...; private SpellChecker() {} // 객체 생성 방지  public static boolean isValid(String word) { ... } public static List&amp;lt;String&amp;gt; suggestions(String typo) { .</description>
    </item>
    
    <item>
      <title>[아이템 4] 인스턴스를 막으려거든 private 생성자를 사용하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item4/</link>
      <pubDate>Fri, 19 Jun 2020 15:51:43 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item4/</guid>
      <description>java.lang.Math와 java.util.Arrays와 같이 static메서드와 static필드만을 담을 클래스는 인스턴스화를 하는 건 낭비가 됩니다.
매개변수 없는 생성자를 만들지 않으면 기본생성자가 생성이 되는데 이것을 방치하면 클라이언트 입장에서는 정적 멤버만 담은 유틸리티 클래스인지 알 수 없으므로 인스턴스화를 시킬 가능성이 있습니다. 이를 방지하기 위해 private생성자를 만들어서 인스턴스화를 막을 수 있습니다.
1 2 3 4 5 6 7  public class UtilityClass { // 기본 생성자가 만들어지는 것을 막는다.(인스턴스화 방지용)  private UtilityClass() { throw new AssertionError(); } .</description>
    </item>
    
    <item>
      <title>[아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item3/</link>
      <pubDate>Thu, 18 Jun 2020 19:09:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item3/</guid>
      <description>싱글턴Singleton이란 인스턴스를 오직 하나만 생성할 수 있는 클래스를 말합니다. 즉 객체를 호출할 때마다 new키워드로 호출해서 새로 생성하지 않고 하나의 인스턴스를 계속 사용하는 것입니다.
싱글턴을 만드는 방식은 보통 둘 중 하나입니다. 📌 public static 멤버가 final인 방식 1 2 3 4 5 6 7 8 9  public class Elvis { public static final Elvis INSTANCE = new Elvis(); private void Elvis() { ... } private void leaveTheBuilding() { ... } }   public이나 protected 생성자가 없으므로 Elvis 클래스가 초기화 될 때 만들어진 인스턴스는 하나 뿐입니다.</description>
    </item>
    
    <item>
      <title>[아이템 2] 생성자에 매개변수가 많다면 빌더를 고려하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item2/</link>
      <pubDate>Thu, 18 Jun 2020 17:21:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item2/</guid>
      <description>매개변수가 많아질 경우 정적 팩토리 메서드와 생성자는 사용하기 불편해집니다. 📌 첫 번째 대안, 생성자를 이용할 경우 1  Nutritionfact cocaCola = new Nutritionfact(240, 8, 100, 0, 35);   이렇게 생성자를 만들 수 있지만 어떤 속성 값을 설정했는지 알기 힘듭니다. 매개변수의 수가 늘어날 수록 코드를 작성하거나 읽기 힘들어집니다. 문제는 매개변수 타입이 같은 상황에서 실수로 순서를 바꿔 입력할 경우 컴파일 시점에서 알 수 없고 런타임에 엉뚱하게 동작하게 됩니다.
📌 두 번째 대안, 자바빈 또 다른 대안으로는 매개변수가 없는 생성자를 만든 뒤 setter를 통해서 값을 설정하는 방법입니다.</description>
    </item>
    
    <item>
      <title>[아이템 1] 생성자 대신 정적 팩토리 메서드를 고려하라</title>
      <link>https://qutrits.github.io/effective-java-3e/chapter-01/item1/</link>
      <pubDate>Thu, 18 Jun 2020 15:49:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/effective-java-3e/chapter-01/item1/</guid>
      <description>일반적으로 사용하는 public 생성자 대신, 별도로 정적 팩토리 메서드를 이용할 수 있다. 1 2 3  public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Booelan.FALSE; }   Boolean 클래스에서 발췌한 예제 코드
 장점 📌 첫 번째, 이름을 가질 수 있다. 생성자에 넘기는 매개변수만으로 반환될 객체의 특성을 제대로 설명하지 못합니다. 반면 정적 팩터리 메서드는 이름을 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있습니다.
하나의 시그니처로는 생성자를 하나만 만들 수 있으며 입력 매개변수들의 순서를 다르게 한 생성자를 추가하는 식으로 이 제한을 피할 수는 있지만, 이 역시 객체의 특성을 살리기 힘들고 좋지 않은 방식입니다.</description>
    </item>
    
  </channel>
</rss>
