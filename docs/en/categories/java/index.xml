<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>java on &lt;Qutrits/&gt;</title>
    <link>https://qutrits.github.io/en/categories/java/</link>
    <description>Recent content in java on &lt;Qutrits/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 09 Jul 2020 18:21:51 +0900</lastBuildDate><atom:link href="https://qutrits.github.io/en/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Item 33] Consider typesafe heterogeneous containers</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item33/</link>
      <pubDate>Thu, 09 Jul 2020 18:21:51 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item33/</guid>
      <description>[Item 33] Consider typesafe heterogeneous containers. 타입 안전 이종 컨테이너 패턴이란 키를 매개변수화한 다음, 컨테이너에 값을 넣거나 뺄 때 매개변수화한 키를 함께 제공하는 방식입니다.
1 2 3 4 5  // 타입 안전 이종 컨테이너 패턴 - API public class Favorites { public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance); public &amp;lt;T&amp;gt; getFavorite(Class&amp;lt;T&amp;gt; type); }   다음은 Favorite 클래스를 사용하는 예시입니다.
1 2 3 4 5 6 7 8 9 10  // 타입 안전 이종 컨태이너 패턴 - 클라이언트 Favorites f = new Favorites(); f.</description>
    </item>
    
    <item>
      <title>[Item 32] Combine generics and varargs judiciously</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item32/</link>
      <pubDate>Thu, 09 Jul 2020 16:12:48 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item32/</guid>
      <description>[Item 32] Combine generics and varargs judiciously. 가변인수와 제네릭은 자바 5에 함께 추가되었는데 이 둘은 서로 어울리지 않습니다.
가변인수(varargs)란 메서드에 넘기는 인수의 개수를 클라이언트가 조절할 수 있게 해주는 것입니다. 구현 방식에 허점이 있습나다. 가변인수 메서드를 호출하면 가변인수를 담기 위한 배열이 자동으로 하나 만들어집니다. 그런데 내부로 감춰야 했을 이 배열을 그만 클라이언트에 노출하는 문제가 생겼습니다. 그 결과 verargs 매개변수에 제네릭이나 매개변수화 타입이 포함되면 알기 어려운 컴파일 경고가 발생합니다.
실체화 불가 타입은 런타임에 컴파일보다 타입 관련 정보를 적게 담고 있습니다.</description>
    </item>
    
    <item>
      <title>[Item 31] Use bounded wildcards to increase API flexibility</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item31/</link>
      <pubDate>Thu, 09 Jul 2020 13:42:19 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item31/</guid>
      <description>[Item 31] Use bounded wildcards to increase API flexibility. 때론 불공변 방식보다 유연한 무언가가 필요할 때가 있습니다.
Item29의 Stack 클래스를 떠올려보면
1 2 3 4 5 6  public class Stack&amp;lt;T&amp;gt; { public Stack(); public void push (E e); public E pop(); public boolean isEmpty(); }   여기서 일련의 원소를 스택에 넣는 메서드를 추가한다고 하면
1 2 3 4 5  public void pushAll(Iterable&amp;lt;E&amp;gt; src) { for (E e : src) { push(e); } }   Iterable src의 원소 타입의 스택의 원소 타입과 일치하면 잘 작동합니다.</description>
    </item>
    
    <item>
      <title>[Item 30] Favor generic methods</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item30/</link>
      <pubDate>Thu, 09 Jul 2020 10:24:41 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item30/</guid>
      <description>[Item 30] Favor generic methods. 제네릭 메서드는 대표적으로 Collections의 알고리즘 메서드(binarySearch, sort 등..)가 있습니다. 사용 방법은 리턴타입 앞에다 타입을 명시해주면 됩니다. 다음은 두 집합의 합집합을 반환하는 문제가 있는 메서드입니다.
1 2 3 4 5 6  // raw tyoe 사용 - 수용 불가 public static Set union(Set s1, Set s2) { Set result = new HashSet(s1); result.addAll(s2); return result; }   컴파일은 되지만 경고가 발생합니다. 경고를 없애려면 이 메서드 타입을 안전하게 만들어야 합니다.</description>
    </item>
    
    <item>
      <title>[Item 29] Favor generic types</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item29/</link>
      <pubDate>Wed, 08 Jul 2020 16:53:15 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item29/</guid>
      <description>[Item 29] Favor generic types. Item7에서 다루었던 스택 코드를 제네릭으로 변형한 코드입니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  public class Stack&amp;lt;E&amp;gt; { private E[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY]; // 경고 메세지 타입이 안전하지 않음  } public void push(E e) { ensoureCapaciy(); elements[size++] = e; } public E pop() { if (size == 0) { throw new EmptyStackException(); } E result = elements[--size]; elements[size] = null; return result; } .</description>
    </item>
    
    <item>
      <title>[Item 28] Prefer lists to arrays</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item28/</link>
      <pubDate>Wed, 08 Jul 2020 14:21:51 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item28/</guid>
      <description>[Item 28] Prefer lists to arrays. 배열과 제네릭 타입의 차이 첫번째 차이점. 배열은 공변 입니다. 어려워 보이는 단어지만 뜻은 간단합니다. Sub가 Super의 하위 타입이라면 배열 Sub[]는 배열 Super[]의 하위 타입이 됩니다.
반면, 제네릭은 불공변입니다. 즉 서로 다른 타입 Type1과 Type2가 있을 때, List&amp;lt;Type1&amp;gt;은 List&amp;lt;Type2&amp;gt;의 하위 타입도 아니고 상위 타입도 아닙니다.
이것만 보면 제네릭에 문제가 있다고 생각할 수 있지만, 사실 문제가 있는 건 배열 쪽입니다. 다음은 문법상 허용되는 코드입니다.
1 2 3  // 런타임 에러 Object[] objectArray = new Long[1]; objectArray[0] = &amp;#34;타입이 달라 넣을 수 없다.</description>
    </item>
    
    <item>
      <title>[Item 27] Eliminate unchecked warnings</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item27/</link>
      <pubDate>Wed, 08 Jul 2020 13:16:11 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item27/</guid>
      <description>[Item 27] Eliminate unchecked warnings. 제네릭에 관련된 수 많은 컴파일 경고들이 있습니다. 비검사 형변환 경고, 비검사 메서드 호출 경고, 비검사 매개변수화 가변인수 타입 경고, 비검사 변환 경고 등이 있습니다.
제네릭에 익숙해질 수록 마주치는 경고 수는 줄어들겠지만 새로 작성한 코드가 한 번에 깨끗하게 컴파일되리라 기대하지는 맙시다.
대부분의 비검사 경고는 쉽게 제거할 수 있습니다. 코드를 다음처럼 잘못 작성했다고 예시를 들어봅시다.
1  Set&amp;lt;Fruits&amp;gt; fruits = new Hashset();   그러면 컴파일러는 무엇이 잘못 됐는지 설멸해 줄 것입니다.</description>
    </item>
    
    <item>
      <title>[Item 26] Don’t use raw types</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item26/</link>
      <pubDate>Tue, 07 Jul 2020 11:41:27 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-04/item26/</guid>
      <description>[Item 26] Don’t use raw types. raw type이란 제네릭 타입에서에서 타입 파라미터를 전혀 사용하지 않았을 때를 말합니다.
1 2  // raw type List list = new ArrayList();   raw type은 타입 선언에서 제네릭 타입 정보가 전부 지워진 것처럼 동작하는데, 제네릭이 도래하기 전 코드와 호환성을 위해서 주로 존재합니다.
1 2  // 문자열을 저장하는 컬렉션 private final List names = new ArrayList();   위 코드를 사용하면 String대신 다른 타입을 넣어도 오류없이 실행됩니다.</description>
    </item>
    
    <item>
      <title>[Item 25] Limit source files to a single top-level class</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item25/</link>
      <pubDate>Sun, 05 Jul 2020 13:12:41 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item25/</guid>
      <description>[Item 25] Limit source files to a single top-level class. 1 2 3 4 5  public class Main { public static void main(String[] args) { System.out.println(Utensil.NAME + Dessert.NAME); } }   위 코드의 소스 파일은 Main 클래스 하나를 담고 있고, Main클래스는 다른 톱레벨 클래스 2개(Utensil Dessert)를 참조합니다.
Utensil와 Dessert 클래스가 Utensil.java라는 한 파일에 정의되어 있다고 가정해봅시다.
1 2 3 4 5 6 7  class Utensil { static final String NAME = &amp;#34;pan&amp;#34;; } class Dessert { static final String NAME = &amp;#34;cake&amp;#34;; }   Main을 실행하면 &amp;ldquo;pancake&amp;quot;가 출력됩니다.</description>
    </item>
    
    <item>
      <title>[Item 24] Favor static member classes over nonstatic</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item24/</link>
      <pubDate>Sun, 05 Jul 2020 11:41:14 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item24/</guid>
      <description>[Item 24] Favor static member classes over nonstatic. 중첩 클래스(nested class)는 자신을 감싼 바깥 클래스에서만 쓰어야 하며 그 이외 쓰임새가 있다면 톱레벨 클래스로 만들어야 합니다.
중첩 클래스는 다음과 같이 네 종류로 나눌 수 있습니다.
 정적 멤버 클래스 (비정적)멤버 클래스 익명 클래스 지역 클래스  이 중 정적 멤버 클래스를 제외한 나머지는 내부 클래스(inner class)에 해당합니다.
정적 멤버 클래스 정적 멤버 클래스는 다른 클래스 안에 선언되고, 바깥 클래스의 private 멤버에도 접근할 수 있다는 점만 제외하고는 일반 클래스외 똑같습니다.</description>
    </item>
    
    <item>
      <title>[Item 23] Prefer class hierarchies to tagged classes</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item23/</link>
      <pubDate>Sat, 04 Jul 2020 15:46:26 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item23/</guid>
      <description>[Item 23] Prefer class hierarchies to tagged classes. 때때로 두 가지 이상의 의미를 표현하고 인스턴스의 특징을 알려주는 태그 필드로 나타내는 클래스를 본 적이 있을겁니다.
안 좋은 예시 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  public class Figure { enum Shape { RECTANGLE, CIRCLE }; // 태그 필드 - 현재 모양을 나타냅니다.</description>
    </item>
    
    <item>
      <title>[Item 22] Use interfaces only to define types</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item22/</link>
      <pubDate>Sat, 04 Jul 2020 13:21:14 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item22/</guid>
      <description>[Item 22] Use interfaces only to define types. 인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 합니다. 그러므로 인터페이스를 구현한 클래스는 클라이언트에게 자신의 인스턴스로 무엇을 할 수 있는지 말해주는 것입니다. 인터페이스를 다른 용도로 사용하는 것은 부적절합니다.
이 지침에 맞지 않는 예로 소위 상수 인터페이스라는 것이 있습니다. 상수 인터페이스는 메서드가 없이, 상수를 뜻하는 static final 필드로만 가득 찬 인터페이스를 뜻합니다.
1 2 3 4 5 6 7  public interface PhysicalConstants { static final double AVOGADROS_NUMBER = 6.</description>
    </item>
    
    <item>
      <title>[Item 21] Design interfaces for posterity</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item21/</link>
      <pubDate>Sat, 04 Jul 2020 11:14:32 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item21/</guid>
      <description>[Item 21] Design interfaces for posterity. JAVA 8이전에는 기존 구현체를 깨뜨리지 않고 인터페이스에 새로운 메서드를 추가할 방법이 없었습니다. JAVA 8부터는 디폴트 메서드를 제공해서 이러한 문제점들을 해결해줬지만 위험이 완전히 사라진 것은 아닙니다.
JAVA 8이전까지는 인터페이스에 새로운 메소드가 추가될리 없다는 암묵적인 가정으로 작성되었습니다.
즉 디폴트 메서드는 구현한 클래스에 동의 없이 무작정 삽입되었습니다. JAVA 8에서는 핵심 컬렉션 인터페이스들에 다수의 디폴트 메서드가 추가되었습니다. 주로 람다를 활용하기 위해서입니다.
자바라이브러리의 디폴트 메서드는 코드 품질이 높고 범용적이라 대부분 잘 작동하지만, 생각할 수 있는 모든 상황에서 불변식을 해치지 않는 디폴트 메서드를 작성하기란 어려운 법입니다.</description>
    </item>
    
    <item>
      <title>[Item 20] Prefer interfaces to abstract classes</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item20/</link>
      <pubDate>Fri, 03 Jul 2020 14:21:15 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item20/</guid>
      <description>[Item 20] Prefer interfaces to abstract classes. 자바가 제공하는 다중 구현 메커니즘은 인터페이스와 추상 클래스가 있습니다. 자바8 부터는 인터페이스에서 defualt moethod를 제공할 수 있게 되어서 두 메커니즘 모두 인스턴스 메서드를 구현 형태로 제공할 수 있습니다.
추상 클래스와 인터페이스의 큰 차이점은 추상 클래스의 정의한 타입을 구현 클래스는 반드시 서브클래스가 된다는 점입니다. 자바에서는 단일 상속만 지원하기 때문에 이런 제약은 새로운 타입을 정의하는데 커다란 제약이 됩니다.
반면 인터페이스의 준수 사항을 잘 지키고 모든 메서드를 구현한 클래스는 어느 계층에 있든 인터페이스를 구현할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[Item 19] Design and document for inheritance or else prohibit it</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item19/</link>
      <pubDate>Fri, 03 Jul 2020 13:57:41 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item19/</guid>
      <description>[Item 19] Design and document for inheritance or else prohibit it. 여기서 말하는 외부란 프로그래머의 통제권 밖에 있어서 언제 어떤식으로 변경될지 모른다는 뜻입니다.
상속을 고려한 문서화  상속용 클래스는 재정의할 수 있는 메서드들은 내부적으로 어떻게 이용하는지 문서로 남겨야 합니다. 클래스의 내부 동작 과정 중간에 끼어들 수 있는 훅(hook)을 잘 선별하여 protected메서드 형태로 공개하는 것도 고려해보는 것도 좋습니다. (한편으로 너무 적게 노출해서 상속으로 얻는 이점을 없애지 않도록 주의해야 합니다.) 상속용으로 설계한 클래스는 배포 전에 반드시 하위 클래스를 만들어 검증 해야 합니다.</description>
    </item>
    
    <item>
      <title>[Item 18] Favor composition over inheritance</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item18/</link>
      <pubDate>Fri, 03 Jul 2020 11:42:22 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item18/</guid>
      <description>[Item 18] Favor composition over inheritance. 우선 이번 Item에서 다루는 상속은 클래스가 다른 클래스를 확장하는 것을 말합니다.
상속 같은 경우 상위 클래스가 구현 방식에 따라 하위 클래스 동작에 영향을 미칠 수 있습니다.
예제를 위한 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  public class CustomHashSet&amp;lt;E&amp;gt; extends HashSet&amp;lt;E&amp;gt; { private int addCount = 0; public CustomHashSet() { } @Override public boolean add(E e) { addCount++; System.</description>
    </item>
    
    <item>
      <title>[Item 17] Minimize mutability</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item17/</link>
      <pubDate>Thu, 02 Jul 2020 14:11:51 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item17/</guid>
      <description>[Item 17] Minimize mutability. 불변 클래스(Immutable Class)란 말 그대로 객체가 생성된 후에 더이상 값을 변경할 수 없는 것을 의미합니다. 자바에서는 대표적으로 String, Integer, Float,Long 등이 있습니다.불변 클래스의 장점
클래스를 불변으로 만들기 위한 규칙  객체의 상태를 변경하는 메서드를 제공하지 않습니다. 클래스를 확장할 수 없도록 합니다. 모든 필드를 private final으로 선언합니다. 생성자 관리를 잘할 것 (밑에서 설명) 자신 외에는 내부에 가변 컴포넌트에 접근할 수 없도록 합니다.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  public final class Calculator { private final int x; private final int y; public Calculator(int x, int y) { this.</description>
    </item>
    
    <item>
      <title>[Item 16] In public classes, use accessor methods, not public fields</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item16/</link>
      <pubDate>Thu, 02 Jul 2020 13:38:11 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item16/</guid>
      <description>[Item 16] In public classes, use accessor methods, not public fields. 1 2 3 4 5  // 부적적한 코드 public class Point { public int x; public int y; }   위 코드는 객체지향의 특징 중 하나인 캡슐화를 살리지 못했습니다.다음과 같이 추상화의 이점을 살려서 코드를 수정할 수 있습니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class Point { public int x; public int y; public Point(int x, int y) { this.</description>
    </item>
    
    <item>
      <title>[Item 15] Minimize the accessibility of classes and members</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item15/</link>
      <pubDate>Thu, 02 Jul 2020 12:52:21 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-03/item15/</guid>
      <description>[Item 15] Minimize the accessibility of classes and members. 잘 설계된 컴포넌트와 그렇지 못한 컴포넌트의 가장 큰 차이는 클래스 내부 데이터와 내부 구현 정보를 외부 컴포넌트로부터 얼마나 잘 숨겼느냐입니다. 설계가 잘 된 컴포넌트는 모든 내부 구현을 숨겨, 구현과 API를 깔끔하게 분리합니다.
정보 은닉(캡슐화)의 장점  시스템 개발 속도를 높입니다. (여러 컴포넌트를 병렬로 개발할 수 있기 때문에) 시스템 관리 비용을 낮춥니다. (각 컴포넌트를 더 빨리 파악하여 디버깅할 수 있고, 다른 컴포넌트로 교체하는 비용도 적기 때문에) 성능 최적화에 도움을 줍니다.</description>
    </item>
    
    <item>
      <title>[Item 14] Consider implementing Comparable</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item14/</link>
      <pubDate>Sat, 27 Jun 2020 17:11:39 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item14/</guid>
      <description>[Item 14] Consider implementing Comparable. 자바에서는 Comparable과 Comparator이라는 정렬 인터페이스를 제공합니다. Comparable은 기본 정렬기준을 구현하는 데 사용하고, Comparator은 기본 정렬기준 외에 다른 기준으로 정렬하고자 할 때 사용합니다. 여기서는 Comparable의 하나 밖에 없는 compareTo메서드에 대해서 알아봅시다.
Comparable을 구현했다는 것은 그 클래스의 인스턴스들에는 natural order가 있음을 의미합니다.
그래서 Comparable을 구현한 객체들의 배열은 다음과 같이 정렬할 수 있습니다.
1  Arrays.sort(a);   compareTo 메서드의 규약 이 객체가 주어진 객체(매개변수로 받는)보다 작으면 음의 정수를, 같으면 0을, 크면 양의 정수를 반환합니다.</description>
    </item>
    
    <item>
      <title>[Item 13] Override clone judiciously </title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item13/</link>
      <pubDate>Sat, 27 Jun 2020 15:04:12 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item13/</guid>
      <description>[Item 13] Override clone judiciously . 실무에서 Cloneable을 구현한 클래스는 clone 메서드를 public으로 제공하며, 사용자는 당연히 복제가 제대로 이뤄지리라 기대합니다. 하지만 clone 메서드의 일반 규약은 허술한 부분이 있습니다. 다음은 Object 명세에서 가져온 설명입니다.
이 객체의 복사본을 생성해 반환합니다. &amp;lsquo;복사&amp;rsquo;의 정확한 뜻은 그 객체를 구현한 클래스에 따라 다를 수 있지만 일반적은 의도는 다음과 같습니다. 어떤 객체 x에 대해 다음 식은 참입니다.
 x.clone() != x x.clone.getClass() = x.getClass() x.clone().equals(x)  clone을 사용하는 방법은 굉장히 쉽습니다.</description>
    </item>
    
    <item>
      <title>[Item 12] Always override toString</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item12/</link>
      <pubDate>Sat, 27 Jun 2020 14:31:22 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item12/</guid>
      <description>[Item 12] Always override toString. toString을 오버라이딩 하지 않으면 기본적으로 클래스_이름@16진수로_표현한_해시코드를 반환합니다.
이렇게 되면 객체의 특성을 알아볼 수 있으므로 toString을 재정의 할 필요가 있습니다.
1 2  Student student = new Student(&amp;#34;kim&amp;#34;, 16); System.out.println(student);   위 코드를 실행하면 Student@abcd같은 형태로 콘솔에 출력되므로 객체의 특성을 파악하기가 힘듭니다.
toString 재정의하는 좋은 방법.  객체가 가진 가진 주요 정보를 모두 반환하는 게 좋습니다. toString을 구현하면 반환값의 포맷을 문서화할지 정해야 합니다.  규칙이 명확해지는 장점이 있지만, 한번 명시하면 그 포맷에 얽매이게 됩니다.</description>
    </item>
    
    <item>
      <title>[Item 11] Always override hashCode when you override equals</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item11/</link>
      <pubDate>Sat, 27 Jun 2020 13:18:21 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item11/</guid>
      <description>[Item 11] Always override hashCode when you override equals. equals와 hasoCode를 재정의 하지 않으면 HashMap이나 HashSet에서 같은 원소를 사용할 때 문제가 발생합니다.
 equals 비교에 사용되는 정보가 변경되지 않는다면, 애플리케이션이 실행되는 동안 객체의 hashCode메서드는 여러번 호출해도 일관된 값을 반환해야 합니다. equals가 두 객체를 같다고 판단하면 hashCode 또한 같은 값을 반환해야 합니다. equals가 두 객체를 다르다고 판단해도, 두 객체의 hashCode가 서로 다른 값을 반환할 필요는 없습니다. 단, 다른 객체에 대해서는 다른 값을 반환해야 해시테이블의 성능이 좋아집니다.</description>
    </item>
    
    <item>
      <title>[Item 10] Obey the general contract when overriding equals</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item10/</link>
      <pubDate>Sat, 27 Jun 2020 11:42:54 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-02/item10/</guid>
      <description>[Item 10] Obey the general contract when overriding equals. equals 메서드를 오버라이딩 하는 경우는 논리적인 동치성을 확인하기 위해서입니다.여기서 말하는 논리적 동치성은 쉽게 말하자면 참조값을 비교하는 게 아닌 객체의 값이 같은지 비교하기 위함이라고 할 수 있습니다.
equals메서드를 오버라아딩 할 때는 다음의 규약을 따라야 합니다.
반사성(reflexivity)  null이 아닌 모든 참조 값 x에 대해, x.equals(x)는 true입니다.  대칭성(symmetry)  null이 아닌 모든 참조 값 x, y에 대해 x.equals(y)는 y.equals(x)입니다.  잘못된 코드 - 대칭성 위반</description>
    </item>
    
    <item>
      <title>[Item 9] Prefer try-with-resources to try-finally</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item9/</link>
      <pubDate>Sat, 20 Jun 2020 17:12:16 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item9/</guid>
      <description>[Item 9] Prefer try-with-resources to try-finally. 자바 라이브러리에는 InputStream, OutputStream, java.sql.Connection과 같이 직접 close를 해야 하는 자원들 있습니다. 클라이언트는 실수로 자원을 닫아주지 않는 경우 예상치 못한 성능 문제로 이어질 수 있습니다.
1 2 3 4 5 6 7 8 9  static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally { br.close(); } } }   나쁘진 않지만 자원을 더 사용하게 되면 살수가 나올 가능성이 큽니다.</description>
    </item>
    
    <item>
      <title>[Item 8] Avoid finalizers and cleaners</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item8/</link>
      <pubDate>Sat, 20 Jun 2020 15:12:33 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item8/</guid>
      <description>[Item 8] Avoid finalizers and cleaners. 자바에서는 두 가지 객체 소멸자를 제공합니다. 바로 finalizer와 cleaner입니다. finalizer는 예측 불가능하며 일반적으로 불필요하며 오작동 낮은 성능과 같은 문제점들이 있습니다. 자바 9부터는 사용 자제(deprecated) API로 지정했습니다.
cleaner는 finalizer보다 덜 위험하지만 이 역시 예측 불가능하고, 느리고 일반적으로 불필요합니다.
단점 언제 실행되는지 알 수가 없다 finalizer와 cleaner는 즉시 실행된다는 보장이 없습니다. 즉 제때 실행되어야 하는 작업을 절대 할 수 없다는 뜻입니다.
finalizer는 굉장히 lazy 합니다 여기서 lazy하다는 뜻은 인스턴스의 자원 회수가 멋대로 지연될 수 있다는 뜻입니다.</description>
    </item>
    
    <item>
      <title>[Item 7] Eliminate obsolete object references</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item7/</link>
      <pubDate>Sat, 20 Jun 2020 12:15:43 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item7/</guid>
      <description>[Item 7] Eliminate obsolete object references. 메모리 누수가 일어나는 예제 코드
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  public class Stack { private Object[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = new Object[DEFAULT_INITIAL_CAPACITY]; } public void push(Object e) { ensureCapacity(); elements[size++] = e; } public Object pop() { if (size == 0) throw new EmptyStackException(); return elements[--size]; // 주의  } private void ensureCapacity() { if (elements.</description>
    </item>
    
    <item>
      <title>[Item 6] Avoid creating unnecessary objects</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item6/</link>
      <pubDate>Fri, 19 Jun 2020 18:33:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item6/</guid>
      <description>[Item 6] Avoid creating unnecessary objects. 기능이 똑같은 객체를 매번 생성하기 보다는 객체를 재사용하는 것이 적절합니다. 특히 불변 객체는 항상 재사용할 수 있습니다.
문자열 생성 방법 객체 생성 방식 - 피해야되는 예시 1  String str = new String(&amp;#34;hello&amp;#34;);   이 방식을 이용하면 똑같은 문자열을 생성하더라도 항상 새로운 객체를 생성하므로 낭비가 됩니다.
리터럴 방식 1  String str = &amp;#34;hello&amp;#34;;   리터럴 방식을 사용하면 JVM에서 동일한 문자열이 존재한다면 그 리터럴을 재사용합니다.</description>
    </item>
    
    <item>
      <title>[Item 5] Prefer dependency injection to hardwiring resources</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item5/</link>
      <pubDate>Fri, 19 Jun 2020 17:15:21 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item5/</guid>
      <description>[Item 5] Prefer dependency injection to hardwiring resources. 대부분의 클래스는 하나 이상의 리소스에 의존합니다. 이번 예제에서는 SpellChecker가 Lexicon를 의존하고 있는 모습입니다.
부적절한 구현 정적 유틸리티를 잘못 사용한 예 - 유연하지 않고 테스트 할 수 없다 1 2 3 4 5 6 7 8 9  public class SpellChecker { private static final Lexicon dictionary = ...; private SpellChecker() { } public static boolean isValid(String word) { ... } public static List&amp;lt;String&amp;gt; suggestions(String typo) { } }   싱글턴을 잘못 사용한 예 - 유연하지 않고 테스트하기 어렵다 1 2 3 4 5 6 7 8 9 10  public class SpellChecker { private final Lexicon dictionary = .</description>
    </item>
    
    <item>
      <title>[Item 4] Enforce noninstantiability with a private constructor</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item4/</link>
      <pubDate>Fri, 19 Jun 2020 15:51:43 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item4/</guid>
      <description>[Item 4] Enforce noninstantiability with a private constructor. java.lang.Math와 java.util.Arrays와 같이 static 메서드와 static 필드만을 담을 클래스는 인스턴스화를 하는 건 낭비가 됩니다.
매개변수 없는 생성자를 만들지 않으면 기본생성자가 생성이 되는데 이것을 방치하면 클라이언트 입장에서는 정적 멤버만 담은 유틸리티 클래스인지 알 수 없으므로 인스턴스화를 시킬 가능성이 있습니다. 이를 방지하기 위해 private 생성자를 만들어서 인스턴스화를 막을 수 있습니다.
1 2 3 4 5  public class UtilityClass { private UtilityClass() { } }   private 생성자이므로 상속을 시도하려는 클래스에서는 생성자를 호출할 수 없기 때문에 상속도 불가능 합니다.</description>
    </item>
    
    <item>
      <title>[Item 3] Enforce the singleton property with a private constructor or an enum type</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item3/</link>
      <pubDate>Thu, 18 Jun 2020 19:09:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item3/</guid>
      <description>[Item 3] Enforce the singleton property with a private constructor or an enum type. 싱글턴(singletone)이란 인스턴스를 오직 하나만 생성할 수 있는 클래스를 말합니다. 즉 객체를 호출할 때마다 new해서 새로 생성하지 않고 하나의 인스턴스를 계속 사용하는 것입니다.
싱글턴을 만드는 방식은 보통 둘 중 하나입니다.
public static 멤버가 final인 방식 1 2 3 4 5 6 7 8 9  public class Elvis { public static final Elvis INSTANCE = new Elvis(); private void Elvis() { .</description>
    </item>
    
    <item>
      <title>[Item 2] Consider a builder when faced with many constructor parameters</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item2/</link>
      <pubDate>Thu, 18 Jun 2020 17:21:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item2/</guid>
      <description>[Item 2] Consider a builder when faced with many constructor parameters. 매개변수가 많아질 경우 정적 팩토리 메서드와 생성자는 사용하기 불편해집니다.
첫번째 대안: 생성자를 이용할 경우 1  Nutritionfact cocaCola = new Nutritionfact(240, 8, 100, 0, 35);   이렇게 생성자를 만들 수 있지만 어떤 속성 값을 설정했는지 알기 힘듭니다. 매개변수의 수가 늘어날 수록 코드를 작성하거나 읽기 힘들어집니다. 문제는 매개변수 타입이 같은 상황에서 실수로 순서를 바꿔 입력할 경우 컴파일 시점에서 알 수 없고 런타임에 엉뚱하게 동작하게 됩니다.</description>
    </item>
    
    <item>
      <title>[Item 1] Consider static factory methods instead of constructors</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item1/</link>
      <pubDate>Thu, 18 Jun 2020 15:49:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item1/</guid>
      <description>[Iteam 1] Consider static factory methods instead of constructors. 일반적으로 사용하는 public 생성자 대신, 별도로 정적 팩토리 메소드를 이용할 수 있다. Boolean 클래스에서 발췌한 예제 코드
1 2 3  public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Booelan.FALSE; }   장점 1. 이름을 가질 수 있다. 생성자에 넘기는 매개변수만으로 반활된 객체의 특성을 제대로 설명하지 못합니다.
반면 정적 팩터리 메서드는 이름을 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있습니다.</description>
    </item>
    
  </channel>
</rss>
