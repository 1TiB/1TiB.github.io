<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Effective Java 3E on &lt;Qutrits/&gt;</title>
    <link>https://qutrits.github.io/en/tags/effective-java-3e/</link>
    <description>Recent content in Effective Java 3E on &lt;Qutrits/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Jun 2020 15:49:20 +0900</lastBuildDate><atom:link href="https://qutrits.github.io/en/tags/effective-java-3e/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[아이템 1] 생성자 대신 정적 팩토리 메서드를 고려하라</title>
      <link>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item1/</link>
      <pubDate>Thu, 18 Jun 2020 15:49:20 +0900</pubDate>
      
      <guid>https://qutrits.github.io/en/posts/effective-java-3e/chapter-01/item1/</guid>
      <description>[Iteam 1] 생성자 대신 정적 팩토리 메서드를 고려하라 일반적으로 사용하는 public 생성자 대신, 별도로 정적 팩토리 메소드를 이용할 수 있다. Boolean 클래스에서 발췌한 예제 코드
1 2 3  public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Booelan.FALSE; }   장점 1. 이름을 가질 수 있다. 생성자에 넘기는 매개변수만으로 반활된 객체의 특성을 제대로 설명하지 못합니다.
반면 정적 팩터리 메서드는 이름을 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있습니다.</description>
    </item>
    
  </channel>
</rss>
