<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Effective Java 3E on &lt;Qubqub/&gt;</title>
    <link>https://qubqub.github.io/series/effective-java-3e/</link>
    <description>Recent content in Effective Java 3E on &lt;Qubqub/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 02 Aug 2021 10:11:42 +0900</lastBuildDate><atom:link href="https://qubqub.github.io/series/effective-java-3e/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[아이템 85] 자바 직렬화의 대안을 찾으라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-11/item85/</link>
      <pubDate>Mon, 02 Aug 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-11/item85/</guid>
      <description>[아이템 85] 자바 직렬화의 대안을 찾으라. 자바의 역직렬화에는 치명적인 단점이 있습니다. 신롸할 수 없는 스트림을 역직렬화하면 원격 코드 실행, 서비스 거부 등의 공격으로 이어질 수 있습니다.
역직렬화 폭탄이란 서비스 거부 공격을 유발하는 스트림입니다.1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  static byte[] bomb() { Set&amp;lt;Object&amp;gt; root = new HashSet&amp;lt;&amp;gt;(); Set&amp;lt;Object&amp;gt; s1 = root; Set&amp;lt;Object&amp;gt; s2 = new HashSet&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; 100; i++) { Set&amp;lt;Object&amp;gt; t1 = new HashSet&amp;lt;&amp;gt;(); Set&amp;lt;Object&amp;gt; t2 = new HashSet&amp;lt;&amp;gt;(); t1.</description>
    </item>
    
    <item>
      <title>[아이템 78] 공유중인 가변 데이터는 동기화해 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-10/item78/</link>
      <pubDate>Fri, 02 Jul 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-10/item78/</guid>
      <description>[아이템 78] 공유중인 가변 데이터는 동기화해 사용하라. 동기화란 특정 메서드나 블럭에 한 쓰레드가 접근했을 때, 해당 객체에 락을 걸고 다른 쓰레드가 접근하지 못하도록 하는 것이다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  public class StopThread { private static boolean stopRequested; public static void main(String[] args) throws InterruptedException { Thread backgroundThread = new Thread(() -&amp;gt; { int i = 0; while (!</description>
    </item>
    
    <item>
      <title>[아이템 69] 예외는 진짜 예외 상황에서만 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-09/item69/</link>
      <pubDate>Wed, 02 Jun 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-09/item69/</guid>
      <description>[아이템 69] 예외는 진짜 예외 상황에서만 사용하라. 예외는 반드시 예외 상황에서만 사용해야한다. 일반적인 제어 흐름용으로 사용하면 안 됩니다.
1 2 3 4 5 6 7 8  try { int i = 0; while (true) { index[i++].doSomething(); } } catch (ArrayIndexOutOfBoundsException) { .. }   코드가 장황하고 직관적이지 않습니다. 성능도 일반적인 제어 흐름보다 느립니다.</description>
    </item>
    
    <item>
      <title>[아이템 57] 지역변수의 범위를 최소화하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-08/item57/</link>
      <pubDate>Sun, 02 May 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-08/item57/</guid>
      <description>[아이템 57] 지역변수의 범위를 최소화하라. 지역변수의 범위는 가능한 좁히는 게 좋습니다. 가장 좋은 방법은 선언과 동사에 초기화 해주는 것입니다. 초기화에 필요한 정보가 없다면 정보가 주어질 때까지 선언을 미루는 것입니다.. 물론 try-catch문은 이 규칙에서 예외입니다. try 블록 안에서 초기화해야하고 밖에서도 쓰일 경우 try 블록 앞에서 선언해야 합니다.

이러한 지역변수 초기화는 대표적으로 for (for-each), while로 비교할 수 있습니다.
1 2 3 4  // 컬렉션이나 베열을 순회하는 권장 관용구 for (Element e : c) { .</description>
    </item>
    
    <item>
      <title>[아이템 49] 매개변수가 유효한지 검사하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-07/item49/</link>
      <pubDate>Fri, 02 Apr 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-07/item49/</guid>
      <description>매개변수가 유효한지 검사하라. 메서드와 생성자는 대부분 특정 조건의 입력 매개변수에 특정 조건을 만족하기를 바랍니다. 만일 잘못된 값이 들어올 경우 보통 예외를 던지거나 컴파일 오류를 잡아내긴 하지만, 오류는 가능한 빨리 잡아내는 게 좋습니다. 그렇지 않으면 감지하기 어려워지고 감지하더라도 찾아내기 힘들어지는 경우도 있습니다.
이러한 경우를 방지하기 위해 매개변수를 미리 확인한다면 즉각적이고 깔끔한 방식으로 예외를 처리할 수 있습니다.

하지만 반드시 메서드를 실행하기 전에 매개변수 유효성 검사를 해야하는 것만은 아닙니다. 유효성 검사 비용이 지나치게 높거나 실용적이지 않을 때는 다시 고려를 해봐야 합니다.</description>
    </item>
    
    <item>
      <title>[아이템 42] 익명 클래스보다는 람다를 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-06/item42/</link>
      <pubDate>Tue, 02 Mar 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-06/item42/</guid>
      <description>[아이템 42] 익명 클래스보다는 람다를 사용하라. 자바 8부터는 함수형 프로그래밍을 지원합니다. 추상 메서드가 하나인(Single Abstract Method)인터페이스를 함수형 인터페이스라고 부르며 람다식을 사용해 만들 수 있습니다. 람다는 익명클래스에 비해 코드가 간결하고 가독성이 좋다는 장점이 있습니다.
1 2 3 4 5 6 7  // 익명 클래스 방식 Collections.sort(words, new Comparator&amp;lt;String&amp;gt;() { @Override public int compare(String s1, String s2) { return Interget.compare(s1.length(), s2.length()); } });   1 2 3  // 람다 활용 Collections.</description>
    </item>
    
    <item>
      <title>[아이템 34] int 상수 대신 열거 타입을 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-05/item34/</link>
      <pubDate>Tue, 02 Feb 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-05/item34/</guid>
      <description>[아이템 34] int 상수 대신 열거 타입을 사용하라. 열거 타입이란 일정 개수의 상수 값을 정의하고 그 이외 값들은 허용하지 않는 타입입니다. 대표적으로 사계절, 요일, 태양계의 행성 등이 있습니다.
열거 타입을 지원하기 전 코드 1 2 3 4 5  // 정수 열거 패턴 - 상당히 취약하다. public static final int EAST = 0; public static final int WEST = 1; public static final int SOUTH = 2; public static final int NORTH = 3;   이 코드는 타입의 안전성을 보장할 수 없고 표현력도 좋지 않습니다.</description>
    </item>
    
    <item>
      <title>[아이템 33] 타입 안전 이종 컨테이너를 고려하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item33/</link>
      <pubDate>Thu, 09 Jul 2020 18:21:51 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item33/</guid>
      <description>[아이템 33] 타입 안전 이종 컨테이너를 고려하라. 타입 안전 이종 컨테이너 패턴이란 키를 매개변수화한 다음, 컨테이너에 값을 넣거나 뺄 때 매개변수화한 키를 함께 제공하는 방식입니다.
1 2 3 4 5  // 타입 안전 이종 컨테이너 패턴 - API public class Favorites { public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type, T instance); public &amp;lt;T&amp;gt; getFavorite(Class&amp;lt;T&amp;gt; type); }   다음은 Favorite 클래스를 사용하는 예시입니다.
1 2 3 4 5 6 7 8 9 10  // 타입 안전 이종 컨태이너 패턴 - 클라이언트 Favorites f = new Favorites(); f.</description>
    </item>
    
    <item>
      <title>[아이템 32] 제네릭과 가변인수를 함께 쓸 때는 신중하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item32/</link>
      <pubDate>Thu, 09 Jul 2020 16:12:48 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item32/</guid>
      <description>[아이템 32] 제네릭과 가변인수를 함께 쓸 때는 신중하라. 가변인수와 제네릭은 자바 5에 함께 추가되었는데 이 둘은 서로 어울리지 않습니다.
가변인수(varargs)란 메서드에 넘기는 인수의 개수를 클라이언트가 조절할 수 있게 해주는 것입니다. 구현 방식에 허점이 있습나다. 가변인수 메서드를 호출하면 가변인수를 담기 위한 배열이 자동으로 하나 만들어집니다. 그런데 내부로 감춰야 했을 이 배열을 그만 클라이언트에 노출하는 문제가 생겼습니다. 그 결과 verargs 매개변수에 제네릭이나 매개변수화 타입이 포함되면 알기 어려운 컴파일 경고가 발생합니다.
실체화 불가 타입은 런타임에 컴파일보다 타입 관련 정보를 적게 담고 있습니다.</description>
    </item>
    
    <item>
      <title>[아이템 31] 한정적 와일드카드를 사용해 API 유연성을 높여라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item31/</link>
      <pubDate>Thu, 09 Jul 2020 13:42:19 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item31/</guid>
      <description>[아이템 31] 한정적 와일드카드를 사용해 API 유연성을 높여라. 때론 불공변 방식보다 유연한 무언가가 필요할 때가 있습니다.
아이템29의 Stack 클래스를 떠올려보면
1 2 3 4 5 6  public class Stack&amp;lt;T&amp;gt; { public Stack(); public void push (E e); public E pop(); public boolean isEmpty(); }   여기서 일련의 원소를 스택에 넣는 메서드를 추가한다고 하면
1 2 3 4 5  public void pushAll(Iterable&amp;lt;E&amp;gt; src) { for (E e : src) { push(e); } }   Iterable src의 원소 타입의 스택의 원소 타입과 일치하면 잘 작동합니다.</description>
    </item>
    
    <item>
      <title>[아이템 30] 이왕이면 제네릭 메서드로 만들라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item30/</link>
      <pubDate>Thu, 09 Jul 2020 10:24:41 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item30/</guid>
      <description>[아이템 30] 이왕이면 제네릭 메서드로 만들라. 제네릭 메서드는 대표적으로 Collections의 알고리즘 메서드(binarySearch, sort 등..)가 있습니다. 사용 방법은 리턴타입 앞에다 타입을 명시해주면 됩니다. 다음은 두 집합의 합집합을 반환하는 문제가 있는 메서드입니다.
1 2 3 4 5 6  // raw tyoe 사용 - 수용 불가 public static Set union(Set s1, Set s2) { Set result = new HashSet(s1); result.addAll(s2); return result; }   컴파일은 되지만 경고가 발생합니다. 경고를 없애려면 이 메서드 타입을 안전하게 만들어야 합니다.</description>
    </item>
    
    <item>
      <title>[아이템 29] 이왕이면 제네릭 타입으로 만들라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item29/</link>
      <pubDate>Wed, 08 Jul 2020 16:53:15 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item29/</guid>
      <description>[아이템 29] 이왕이면 제네릭 타입으로 만들라. 아이템7에서 다루었던 스택 코드를 제네릭으로 변형한 코드입니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  public class Stack&amp;lt;E&amp;gt; { private E[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY]; // 경고 메세지 타입이 안전하지 않음  } public void push(E e) { ensoureCapaciy(); elements[size++] = e; } public E pop() { if (size == 0) { throw new EmptyStackException(); } E result = elements[--size]; elements[size] = null; return result; } .</description>
    </item>
    
    <item>
      <title>[아이템 28] 배열보다는 리스트를 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item28/</link>
      <pubDate>Wed, 08 Jul 2020 14:21:51 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item28/</guid>
      <description>[아이템 28] 배열보다는 리스트를 사용하라. 배열과 제네릭 타입의 차이 첫번째 차이점. 배열은 공변 입니다. 어려워 보이는 단어지만 뜻은 간단합니다. Sub가 Super의 하위 타입이라면 배열 Sub[]는 배열 Super[]의 하위 타입이 됩니다.
반면, 제네릭은 불공변입니다. 즉 서로 다른 타입 Type1과 Type2가 있을 때, List&amp;lt;Type1&amp;gt;은 List&amp;lt;Type2&amp;gt;의 하위 타입도 아니고 상위 타입도 아닙니다.
이것만 보면 제네릭에 문제가 있다고 생각할 수 있지만, 사실 문제가 있는 건 배열 쪽입니다. 다음은 문법상 허용되는 코드입니다.
1 2 3  // 런타임 에러 Object[] objectArray = new Long[1]; objectArray[0] = &amp;#34;타입이 달라 넣을 수 없다.</description>
    </item>
    
    <item>
      <title>[아이템 27] 비검사 경고를 제거하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item27/</link>
      <pubDate>Wed, 08 Jul 2020 13:16:11 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item27/</guid>
      <description>[아이템 27] 비검사 경고를 제거하라. 제네릭에 관련된 수 많은 컴파일 경고들이 있습니다. 비검사 형변환 경고, 비검사 메서드 호출 경고, 비검사 매개변수화 가변인수 타입 경고, 비검사 변환 경고 등이 있습니다.
제네릭에 익숙해질 수록 마주치는 경고 수는 줄어들겠지만 새로 작성한 코드가 한 번에 깨끗하게 컴파일되리라 기대하지는 맙시다.
대부분의 비검사 경고는 쉽게 제거할 수 있습니다. 코드를 다음처럼 잘못 작성했다고 예시를 들어봅시다.
1  Set&amp;lt;Fruits&amp;gt; fruits = new Hashset();   그러면 컴파일러는 무엇이 잘못 됐는지 설멸해 줄 것입니다.</description>
    </item>
    
    <item>
      <title>[아이템 26] Raw 타입은 사용하지 마라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-04/item26/</link>
      <pubDate>Tue, 07 Jul 2020 11:41:27 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-04/item26/</guid>
      <description>[아이템 26] Raw 타입은 사용하지 마라. raw type이란 제네릭 타입에서에서 타입 파라미터를 전혀 사용하지 않았을 때를 말합니다.
1 2  // raw type List list = new ArrayList();   raw type은 타입 선언에서 제네릭 타입 정보가 전부 지워진 것처럼 동작하는데, 제네릭이 도래하기 전 코드와 호환성을 위해서 주로 존재합니다.
1 2  // 문자열을 저장하는 컬렉션 private final List names = new ArrayList();   위 코드를 사용하면 String대신 다른 타입을 넣어도 오류없이 실행됩니다.</description>
    </item>
    
    <item>
      <title>[아이템 25] 톱레벨 클래스는 한 파일에만 담으라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item25/</link>
      <pubDate>Sun, 05 Jul 2020 13:12:41 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item25/</guid>
      <description>1 2 3 4 5  public class Main { public static void main(String[] args) { System.out.println(Utensil.NAME + Dessert.NAME); } }   위 코드의 코드는 Main 클래스 하나를 담고 있고, Main클래스는 다른 톱레벨 클래스 2개(Utensil, Dessert)를 참조합니다.
Utensil와 Dessert 클래스가 Utensil.java라는 한 파일에 정의되어 있다고 가정해봅시다.
1 2 3 4 5 6 7  class Utensil { static final String NAME = &amp;#34;pan&amp;#34;; } class Dessert { static final String NAME = &amp;#34;cake&amp;#34;; }   Main을 실행하면 &amp;ldquo;pancake&amp;quot;가 출력됩니다.</description>
    </item>
    
    <item>
      <title>[아이템 24] 멤버 클래스는 되도록 static으로 만들어라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item24/</link>
      <pubDate>Sun, 05 Jul 2020 11:41:14 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item24/</guid>
      <description>중첩 클래스nested class는 자신을 감싼 바깥 클래스에서만 쓰여야 하며 그 이외 쓰임새가 있다면 톱레벨 클래스로 만들어야 합니다.
중첩 클래스는 다음과 같이 네 종류로 나눌 수 있습니다.
 정적 멤버 클래스 (비정적)멤버 클래스 익명 클래스 지역 클래스  이 중 정적 멤버 클래스를 제외한 나머지는 내부 클래스inner class에 해당합니다.
정적 멤버 클래스 정적 멤버 클래스는 다른 클래스 안에 선언되고, 바깥 클래스의 private 멤버에도 접근할 수 있다는 점만 제외하고는 일반 클래스외 똑같습니다. 정적 멤버 클래스는 흔히 바깥 클래스와 함께 쓰일 때만 유용한 public 도우미 클래스로 쓰입니다.</description>
    </item>
    
    <item>
      <title>[아이템 23] 태그 달린 클래스보다는 클래스 계층구조를 활용하자</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item23/</link>
      <pubDate>Sat, 04 Jul 2020 15:46:26 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item23/</guid>
      <description>때때로 두 가지 이상의 의미를 표현하고 인스턴스의 특징을 알려주는 태그 필드로 나타내는 클래스를 본 적이 있을겁니다.
안 좋은 예시 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  public class Figure { enum Shape { RECTANGLE, CIRCLE }; // 태그 필드 - 현재 모양을 나타냅니다.</description>
    </item>
    
    <item>
      <title>[아이템 22] 인터페이스는 타입을 정의하는 용도로만 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item22/</link>
      <pubDate>Sat, 04 Jul 2020 13:21:14 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item22/</guid>
      <description>인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 합니다. 그러므로 인터페이스를 구현한 클래스는 클라이언트에게 자신의 인스턴스로 무엇을 할 수 있는지 말해주는 것입니다. 인터페이스를 다른 용도로 사용하는 것은 부적절합니다.
이 지침에 맞지 않는 예로 소위 상수 인터페이스라는 것이 있습니다. 상수 인터페이스는 메서드가 없이, 상수를 뜻하는 static final 필드로만 가득 찬 인터페이스를 뜻합니다.
1 2 3 4 5 6 7  public interface PhysicalConstants { static final double AVOGADROS_NUMBER = 6.</description>
    </item>
    
    <item>
      <title>[아이템 21] 인터페이스는 구현하는 쪽을 생각해 설계하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item21/</link>
      <pubDate>Sat, 04 Jul 2020 11:14:32 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item21/</guid>
      <description>JAVA 8이전에는 기존 구현체를 깨뜨리지 않고 인터페이스에 새로운 메서드를 추가할 방법이 없었습니다. JAVA 8부터는 디폴트 메서드를 제공해서 이러한 문제점들을 해결해줬지만 위험이 완전히 사라진 것은 아닙니다.
JAVA 8이전까지는 인터페이스에 새로운 메소드가 추가될리 없다는 암묵적인 가정으로 작성되었습니다.
즉 디폴트 메서드는 구현한 클래스에 동의 없이 무작정 삽입되었습니다. JAVA 8에서는 핵심 컬렉션 인터페이스들에 다수의 디폴트 메서드가 추가되었습니다. 주로 람다를 활용하기 위해서입니다.
자바 라이브러리의 디폴트 메서드는 코드 품질이 높고 범용적이라 대부분 잘 작동하지만, 생각할 수 있는 모든 상황에서 불변식을 해치지 않는 디폴트 메서드를 작성하기란 어려운 법입니다.</description>
    </item>
    
    <item>
      <title>[아이템 20] 추상 클래스보다는 인터페이스를 우선하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item20/</link>
      <pubDate>Fri, 03 Jul 2020 14:21:15 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item20/</guid>
      <description>자바가 제공하는 다중 구현 메커니즘은 인터페이스와 추상 클래스가 있습니다. JAVA 8 부터는 인터페이스에서 defualt moethod를 제공할 수 있게 되어서 두 메커니즘 모두 인스턴스 메서드를 구현 형태로 제공할 수 있습니다.
추상 클래스와 인터페이스의 큰 차이점은 추상 클래스의 정의한 타입을 구현 클래스는 반드시 서브클래스가 된다는 점입니다. 자바에서는 단일 상속만 지원하기 때문에 이런 제약은 새로운 타입을 정의하는데 커다란 제약이 됩니다.
반면 인터페이스의 준수 사항을 잘 지키고 모든 메서드를 구현한 클래스는 어느 계층에 있든 인터페이스를 구현할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[아이템 19] 상속을 고려해 설계하고 문서화하라. 그렇지 않았다면 상속을 금지하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item19/</link>
      <pubDate>Fri, 03 Jul 2020 13:57:41 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item19/</guid>
      <description>여기서 말하는 외부란 프로그래머의 통제권 밖에 있어서 언제 어떤식으로 변경될지 모른다는 뜻입니다.
상속을 고려한 문서화  상속용 클래스는 재정의할 수 있는 메서드들은 내부적으로 어떻게 이용하는지 문서로 남겨야 합니다. 클래스의 내부 동작 과정 중간에 끼어들 수 있는 훅(hook)을 잘 선별하여 protected메서드 형태로 공개하는 것도 고려해보는 것도 좋습니다. (한편으로 너무 적게 노출해서 상속으로 얻는 이점을 없애지 않도록 주의해야 합니다.) 상속용으로 설계한 클래스는 배포 전에 반드시 하위 클래스를 만들어 검증 해야 합니다.
  상속을 허용하는 클래스가 지켜야 할 제약 상속용 클래스의 생성자는 직접적으로든 간접적으로든 재정의 가능 메서드를 호출해서는 안 됩니다.</description>
    </item>
    
    <item>
      <title>[아이템 18] 상속보다는 컴포지션을 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item18/</link>
      <pubDate>Fri, 03 Jul 2020 11:42:22 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item18/</guid>
      <description>우선 이번 아이템에서 다루는 상속은 클래스가 다른 클래스를 확장하는 것을 말합니다.
상속 같은 경우 상위 클래스가 구현 방식에 따라 하위 클래스 동작에 영향을 미칠 수 있습니다.
예제를 위한 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  public class CustomHashSet&amp;lt;E&amp;gt; extends HashSet&amp;lt;E&amp;gt; { private int addCount = 0; public CustomHashSet() { } @Override public boolean add(E e) { addCount++; System.</description>
    </item>
    
    <item>
      <title>[아이템 17] 변경 가능성을 최소화하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item17/</link>
      <pubDate>Thu, 02 Jul 2020 14:11:51 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item17/</guid>
      <description>불변 클래스(Immutable Class)란 말 그대로 객체가 생성된 후에 더이상 값을 변경할 수 없는 것을 의미합니다. 자바에서는 대표적으로 String, Integer, Float,Long 등이 있습니다.
📌 클래스를 불변으로 만들기 위한 규칙  객체의 상태를 변경하는 메서드를 제공하지 않습니다. 클래스를 확장할 수 없도록 합니다. 모든 필드를 private final으로 선언합니다. 생성자 관리를 잘할 것 (밑에서 설명) 자신 외에는 내부에 가변 컴포넌트에 접근할 수 없도록 합니다.
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  public final class Calculator { private final int x; private final int y; public Calculator(int x, int y) { this.</description>
    </item>
    
    <item>
      <title>[아이템 16] public 클래스에서는 public 필드가 아닌 접근 메서드를 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item16/</link>
      <pubDate>Thu, 02 Jul 2020 13:38:11 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item16/</guid>
      <description>1 2 3 4 5  // 부적적한 코드 public class Point { public int x; public int y; }   위 코드는 객체지향의 특징 중 하나인 캡슐화를 살리지 못했습니다.
다음과 같이 추상화의 이점을 살려서 코드를 수정할 수 있습니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class Point { public int x; public int y; public Point(int x, int y) { this.</description>
    </item>
    
    <item>
      <title>[아이템 15] 클래스와 멤버의 접근 권한을 최소화하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-03/item15/</link>
      <pubDate>Thu, 02 Jul 2020 12:52:21 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-03/item15/</guid>
      <description>잘 설계된 컴포넌트와 그렇지 못한 컴포넌트의 가장 큰 차이는 내부 데이터와 구현 정보를 외부로부터 얼마나 잘 숨겼느냐에 있습니다. 잘 설계된 컴포넌트는 모든 내부 구현을 숨기고, 구현과 API를 깔끔하게 분리합니다.
1. 정보 은닉(캡슐화)의 장점  개발 속도 증가: 여러 컴포넌트를 병렬로 개발할 수 있어 시스템 개발 속도가 빨라집니다. 관리 비용 절감: 각 컴포넌트를 더 빨리 파악할 수 있어 디버깅과 교체 비용이 낮아집니다. 성능 최적화: 특정 컴포넌트만 최적화할 수 있어 성능 향상에 도움이 됩니다.</description>
    </item>
    
    <item>
      <title>[아이템 14] Comparable를 구현할지 고려하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-02/item14/</link>
      <pubDate>Sat, 27 Jun 2020 17:11:39 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-02/item14/</guid>
      <description>자바에서는 Comparable과 Comparator라는 두 가지 정렬 인터페이스를 제공합니다. Comparable은 기본 정렬 기준을 구현하는 데 사용되고, Comparator는 다른 기준으로 정렬하고자 할 때 사용됩니다. 이번 포스트에서는 Comparable 인터페이스의 유일한 메서드인 compareTo에 대해 알아보겠습니다.
1. Comparable의 의미 Comparable을 구현했다는 것은 해당 클래스의 인스턴스들이 natural order를 갖는다는 것을 의미합니다. 이를 통해 Comparable을 구현한 객체들의 배열은 다음과 같이 정렬할 수 있습니다:
1  Arrays.sort(a);   
2. compareTo 메서드의 규약 compareTo 메서드는 다음과 같은 규칙을 따릅니다:</description>
    </item>
    
    <item>
      <title>[아이템 13] clone 재정의는 주의해서 진행하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-02/item13/</link>
      <pubDate>Sat, 27 Jun 2020 15:04:12 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-02/item13/</guid>
      <description>1. clone과 Cloneable의 문제점 Cloneable 인터페이스를 구현한 클래스는 clone 메서드를 public으로 제공하며, 사용자는 이를 통해 객체의 복제가 제대로 이루어지리라 기대합니다. 하지만 clone 메서드의 일반 규약은 몇 가지 허점이 있어, 이를 주의 깊게 다루지 않으면 의도치 않은 결과를 초래할 수 있습니다.
다음은 Object 클래스의 clone 메서드에 대한 명세입니다.
 이 객체의 복사본을 생성해 반환합니다. 복사의 정확한 의미는 그 객체를 구현한 클래스에 따라 달라질 수 있지만, 일반적인 의도는 다음과 같습니다. 어떤 객체 x에 대해 다음 조건을 만족해야 합니다</description>
    </item>
    
    <item>
      <title>[아이템 12] toString을 항상 재정의하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-02/item12/</link>
      <pubDate>Sat, 27 Jun 2020 14:31:22 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-02/item12/</guid>
      <description>1. 기본 toString의 한계 기본적으로 자바 객체는 toString 메서드를 재정의하지 않으면 클래스 이름@해시코드(16진수) 형태로 문자열을 반환합니다. 이는 객체의 고유한 정보나 상태를 파악하는 데 적합하지 않습니다. 예를 들어, 다음과 같은 코드가 있다고 가정해봅시다.
1 2  Student student = new Student(&amp;#34;kim&amp;#34;, 16); System.out.println(student);   위 코드를 실행하면 Student@abcd 같은 형태로 출력됩니다. 이는 객체의 중요한 정보인 name과 age에 대한 내용을 알 수 없으므로, 객체의 상태를 파악하는 데 불편함을 줍니다.
2. toString을 재정의하는 좋은 방법 1) 객체의 주요 정보를 모두 포함하라 객체의 상태를 잘 표현할 수 있는 주요 필드나 속성을 toString 메서드에 포함해야 합니다.</description>
    </item>
    
    <item>
      <title>[아이템 11] equals를 재정의하려거든 hashCode도 재정의하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-02/item11/</link>
      <pubDate>Sat, 27 Jun 2020 13:18:21 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-02/item11/</guid>
      <description>1. 왜 hashCode도 재정의해야 할까? 자바의 HashMap, HashSet 같은 해시 기반 컬렉션은 객체의 고유한 해시값을 사용하여 저장, 검색, 비교를 수행합니다. 따라서 equals를 재정의하고도 hashCode를 재정의하지 않으면, 두 객체가 논리적으로는 같아도 해시값이 다를 수 있어 중복이 발생하거나 의도치 않게 검색에 실패할 수 있습니다.
equals와 hasoCode를 재정의 하지 않으면 HashMap이나 HashSet에서 같은 원소를 사용할 때 문제가 발생합니다.
Object 명세에서 정의한 hashCode 규약
  일관성: equals로 비교되는 정보가 변하지 않는 한, 애플리케이션 실행 동안 여러 번 hashCode를 호출해도 일관된 값을 반환해야 합니다.</description>
    </item>
    
    <item>
      <title>[아이템 10] equals는 일반 규약을 지켜 재정의하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-02/item10/</link>
      <pubDate>Sat, 27 Jun 2020 11:42:54 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-02/item10/</guid>
      <description>equals 메서드를 재정의하는 이유는 논리적 동치성을 비교하기 위함입니다. 논리적 동치성이란 객체의 참조값이 아닌 객체의 값이 같은지를 판단하는 것입니다. equals 메서드를 올바르게 재정의하지 않으면 객체 비교에서 예기치 않은 문제가 발생할 수 있습니다.
equals메서드를 오버라이딩 할 때는 다음의 규약을 따라야 합니다.
1. equals 규약 1) 반사성 (Reflexivity)  null이 아닌 모든 참조 값 x에 대해, x.equals(x)는 true입니다.
  2) 대칭성 (Symmetry)  null이 아닌 모든 참조 값 x, y에 대해 x.equals(y)는 y.</description>
    </item>
    
    <item>
      <title>[아이템 9] try-finally보다는 try-with-resources를 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item09/</link>
      <pubDate>Sat, 20 Jun 2020 17:12:16 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item09/</guid>
      <description>자바에는 InputStream, OutputStream, java.sql.Connection과 같은 직접 닫아줘야 하는 자원들이 존재합니다. 이 자원들을 제대로 닫지 않으면 메모리 누수와 같은 심각한 문제를 초래할 수 있습니다.
📌 실수를 유발할 수 있는 기존 코드 자바에서는 자원을 사용한 후 반드시 해제해야 하므로, 이전에는 try-finally를 사용하여 자원을 해제하는 방식이 흔했습니다. 하지만 이 방식은 복잡하고 오류를 유발할 가능성이 있습니다.
1 2 3 4 5 6 7 8 9  static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.</description>
    </item>
    
    <item>
      <title>[아이템 8] finalizer와 cleaner 사용을 피하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item08/</link>
      <pubDate>Sat, 20 Jun 2020 15:12:33 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item08/</guid>
      <description>1. finalizer와 cleaner란? 자바에서는 객체 소멸 시 특정 작업을 수행하는 두 가지 방법, finalizer와 cleaner를 제공합니다. finalizer는 Java 9부터 deprecated로 지정되었으며, cleaner는 그 대안으로 제공되지만 여전히 예측 불가능하고 성능 문제가 있습니다.
2. finalizer와 cleaner의 문제점 2.1 언제 실행될지 알 수 없다 finalizer와 cleaner는 즉시 실행된다는 보장이 없습니다. 이들은 가비지 컬렉션이 수행될 때 동작하지만, 그 시점을 예측할 수 없기 때문에 시간에 민감한 작업을 이들에 의존할 수 없습니다.
2.2 finalizer의 느린 실행 finalizer는 lazy하게 실행됩니다.</description>
    </item>
    
    <item>
      <title>[아이템 7] 다 쓴 객체 참조를 해제하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item07/</link>
      <pubDate>Sat, 20 Jun 2020 12:15:43 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item07/</guid>
      <description>1. 메모리 누수가 발생하는 예시 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  public class Stack { private Object[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = new Object[DEFAULT_INITIAL_CAPACITY]; } public void push(Object e) { ensureCapacity(); elements[size++] = e; } public Object pop() { if (size == 0) throw new EmptyStackException(); return elements[--size]; // 메모리 누수 발생 가능  } private void ensureCapacity() { if (elements.</description>
    </item>
    
    <item>
      <title>[아이템 6] 불필요한 객체 생성을 피하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item06/</link>
      <pubDate>Fri, 19 Jun 2020 18:33:20 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item06/</guid>
      <description>객체를 생성할 때 기능이 동일한 객체를 매번 새로 생성하기보다는 객체를 재사용하는 것이 성능과 메모리 효율성 측면에서 더욱 적절합니다. 특히 **불변 객체(immutable objects)**는 항상 재사용이 가능하므로 이를 적극 활용해야 합니다.
📌 문자열 생성 방법 객체 생성 방식 - 피해야 되는 예시 1  String str = new String(&amp;#34;hello&amp;#34;);   이 방식은 매번 새로운 객체를 생성합니다. 같은 문자열을 사용하더라도 매번 새로운 인스턴스가 만들어져 낭비가 발생합니다.
리터럴 방식 1  String str = &amp;#34;hello&amp;#34;;   이 방식은 리터럴을 사용하여 JVM이 동일한 문자열을 캐싱하므로, 이미 같은 문자열이 있다면 이를 재사용합니다.</description>
    </item>
    
    <item>
      <title>[아이템 5] 자원을 직접 명시하지 말고 의존객체를 주입을 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item05/</link>
      <pubDate>Fri, 19 Jun 2020 17:15:21 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item05/</guid>
      <description>대부분의 클래스는 하나 이상의 리소스에 의존합니다. 이를 처리하는 방식에 따라 코드의 유연성과 테스트 가능성이 크게 달라집니다. 이번 포스트에서는 이러한 의존성 처리의 잘못된 방식과 올바른 방식을 비교하고, 의존성 주입을 통한 해결 방법을 소개합니다.
부적절한 구현 📌 정적 유틸리티를 잘못 사용한 예 1 2 3 4 5 6 7 8 9 10  public class SpellChecker { private static final Lexicon dictionary = ...; private SpellChecker() {} // 객체 생성 방지  public static boolean isValid(String word) { .</description>
    </item>
    
    <item>
      <title>[아이템 4] 인스턴스를 막으려거든 private 생성자를 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item04/</link>
      <pubDate>Fri, 19 Jun 2020 15:51:43 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item04/</guid>
      <description>개요 java.lang.Math나 java.util.Arrays와 같은 유틸리티 클래스는 정적(static) 메서드와 정적 필드만을 포함하고 있어, 굳이 인스턴스를 생성할 필요가 없습니다. 그러나 기본 생성자를 명시적으로 막지 않으면, 클라이언트 코드가 실수로 인스턴스를 생성할 수 있습니다.
자바에서는 매개변수가 없는 생성자를 명시하지 않으면 기본 생성자가 자동으로 만들어지므로, 이를 방지하기 위해 private 생성자를 정의해야 합니다.
인스턴스화 방지 방법 1 2 3 4 5 6  public class UtilityClass { // 인스턴스화 방지용 private 생성자  private UtilityClass() { throw new AssertionError(); // 인스턴스 생성 시도 시 예외 발생  } }   이 코드의 동작 방식  private 생성자를 선언하여 외부에서 이 클래스를 인스턴스화하는 것을 막습니다.</description>
    </item>
    
    <item>
      <title>[아이템 3] private 생성자나 열거 타입으로 싱글턴임을 보증하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item03/</link>
      <pubDate>Thu, 18 Jun 2020 19:09:20 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item03/</guid>
      <description>싱글턴(Singleton) 패턴은 클래스의 인스턴스를 오직 하나만 생성하여 공유하는 방식입니다. 객체를 호출할 때마다 새로운 인스턴스를 만들지 않고, 동일한 인스턴스를 반환하는 방식이므로 메모리 낭비를 방지하고, 동작의 일관성을 유지할 수 있습니다.
싱글턴을 구현하는 주요 방식은 다음과 같습니다.
📌 public static final 필드를 이용한 방식 1 2 3 4 5 6 7 8 9  public class Elvis { public static final Elvis INSTANCE = new Elvis(); // 유일한 인스턴스  private void Elvis() { .</description>
    </item>
    
    <item>
      <title>[아이템 2] 생성자에 매개변수가 많다면 빌더를 고려하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item02/</link>
      <pubDate>Thu, 18 Jun 2020 17:21:20 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item02/</guid>
      <description>매개변수가 많은 객체를 생성할 때, 생성자나 정적 팩토리 메서드 방식은 사용하기 불편해질 수 있습니다. 특히 매개변수의 순서나 타입이 비슷한 경우, 실수를 유발하거나 코드 가독성이 떨어지기 때문에 대안으로 빌더 패턴(builder pattern) 을 고려할 수 있습니다.
첫 번째 대안, 생성자를 이용할 경우 1  Nutritionfact cocaCola = new Nutritionfact(240, 8, 100, 0, 35);   생성자를 통해 객체를 생성할 때 매개변수가 많으면, 어떤 값이 어떤 속성에 해당하는지 파악하기 어렵습니다. 특히 매개변수 타입이 같다면, 잘못된 순서로 입력해도 컴파일러가 오류를 잡지 못하고, 런타임에서 예상치 못한 동작을 초래할 수 있습니다.</description>
    </item>
    
    <item>
      <title>[아이템 1] 생성자 대신 정적 팩토리 메서드를 고려하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-01/item01/</link>
      <pubDate>Thu, 18 Jun 2020 15:49:20 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-01/item01/</guid>
      <description>일반적으로 사용하는 public 생성자 대신, 별도로 정적 팩토리 메서드를 이용할 수 있다. 객체 생성 시 public 생성자 대신 정적 팩토리 메서드(static factory method) 를 사용하는 것을 고려할 수 있습니다. 이를 통해 다양한 이점을 얻을 수 있는데, Java에서 자주 사용되는 패턴 중 하나입니다.
1 2 3  public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Booelan.FALSE; }   Boolean 클래스에서 발췌한 예제 코드
장점 첫 번째, 이름을 가질 수 있다.</description>
    </item>
    
  </channel>
</rss>
