<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>7장 메서드 on &lt;Qutrits/&gt;</title>
    <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/</link>
    <description>Recent content in 7장 메서드 on &lt;Qutrits/&gt;</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://qutrits.github.io/java/effective-java-3e/chapter-07/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item49/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item49/</guid>
      <description>매개변수가 유효한지 검사하라. 메서드와 생성자는 대부분 특정 조건의 입력 매개변수에 특정 조건을 만족하기를 바랍니다. 만일 잘못된 값이 들어올 경우 보통 예외를 던지거나 컴파일 오류를 잡아내긴 하지만, 오류는 가능한 빨리 잡아내는 게 좋습니다. 그렇지 않으면 감지하기 어려워지고 감지하더라도 찾아내기 힘들어지는 경우도 있습니다.
이러한 경우를 방지하기 위해 매개변수를 미리 확인한다면 즉각적이고 깔끔한 방식으로 예외를 처리할 수 있습니다.

하지만 반드시 메서드를 실행하기 전에 매개변수 유효성 검사를 해야하는 것만은 아닙니다. 유효성 검사 비용이 지나치게 높거나 실용적이지 않을 때는 다시 고려를 해봐야 합니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item50/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item50/</guid>
      <description>[Item50] 적시에 방어적 복사본을 만들라 이번 아이템에서는 지난 Item17에 다루었던 불변에 대한 주제가 포함되어있습니다. 어떤 객체든 객체의 허락 없이는 외부에서 함부로 내부를 수정하게 하는 일이 없아야 합니다. 하지만 주의를 기울이지 않으면 자신도 모르게 내부를 수정하도록 코드를 짜는 경우가 생길 수 있습니다.

다음은 부주의로 일어날 수 있는 상황을 예시로 든 코드입니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  public final class Period { private final Date date; private final Date end; public Period(Date start, Date end) { if (start.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item51/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item51/</guid>
      <description>[아이템 51] 메서드 시그니처를 신중히 설계하라. 메서드 이름을 신중히 짓자. 항상 표준 명명 규칙을 따라야합니다. 이름만 보고 이해할 수 있고, 일관성있게 짓는 것이 핵심입니다. 그 다음 목표는 개발자 커뮤니티에서 널리 받아들여지는 이름을 사용하는 것입니다. 되도록이면 긴 이름은 피하는 것이 좋습니다. 물론 조직내에 규율이 있다면 그 규율을 지키는 게 우선입니다.
편의 메서드를 너무 만들지 말자. 메서드가 너무 많은 클래스는 파악하고 유지보수 하기도 힘들고 객체지향 SOLID원칙 중 Single Responsiblity Principle에 위반될 수도 있습니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item52/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item52/</guid>
      <description>[아이템 52] 다중정의는 신중히 사용하라. 다음은 컬렉션을 집합, 리스트, 그 외로 구분하고자 만든 프로그램입니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  public class CollectionClassifier { public static String classify(Set&amp;lt;?&amp;gt; s) { return &amp;#34;Set&amp;#34;; } public static String classify(List&amp;lt;?&amp;gt; lst) { return &amp;#34;List&amp;#34;; } public static String classify(Collection&amp;lt;?&amp;gt; c) { return &amp;#34;Unknown Collection&amp;#34;; } public static void main(String[] args) { Collection&amp;lt;?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item53/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item53/</guid>
      <description>[아이템 53] 가변인수는 신중히 사용하라. 가변인수(varargs) 메서드는 명시한 타입의 인수를 0개 이상 받을 수 있습니다. 다음 예제는 int 인자의 합을 구하는 가변인수 메서드입니다.
1 2 3 4 5 6 7  static int sum(int... args) { int sum = 0; for (int args: args) { sum += args; } return sum; }   1개 이상의 인수가 필요한 경우도 있습니다. 다음 예제는 1개 이상의 인수를 필요료하는 가변인수 메서드의 잘못된 구현입니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item54/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item54/</guid>
      <description>[아이템 54] null이 아닌, 빈 컬렉션이나 배열을 반환하라. 1 2 3 4 5 6  // 컬렉션이 비어있으면 null을 반환 - 따라하지 말 것 private final List&amp;lt;Cheese&amp;gt; cheesesInStock = ...; public List&amp;lt;Cheese&amp;gt; getCheeses() { return cheesesInStock.isEmpty() ? null : new ArrayList&amp;lt;&amp;gt;(cheesesInStock); }   null을 반환할 경우 클라이어트는 이 null 상황을 처리하는 코드를 추가로 작성해야합니다.
1 2 3 4  List&amp;lt;Cheese&amp;gt; cheesesInStock = shop.getCheeses(); if (cheese != null &amp;amp;&amp;amp; cheeses.contains(cheese.STILTON)) { system.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item55/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item55/</guid>
      <description>[아이템 55] 옵셔널 반환은 신중히 하라 자바 8이전에는 메서드가 특정 값을 반환할 수 없을때 취할 수 있는 선택지가 두 가지가 있었습니다. 예외를 던지거나, null을 반환하는 것입니다. 두 방법 모두 허점이 있습니다. 예외는 진짜 예외적인 상황에서만 사용해야 하며 예외를 생성할 때 스택 추적 전체를 캡쳐하므로 바용도 만만치 않습니다. null을 반환할 수 있는 메서드를 호출하면 null 처리를 별도로 해줘야합니다. null 처리를 무시하면 나중에 NPE가 발생할 수 있습니다.

자바 8부터는 Optional을 지원했습니다. Optional&amp;lt;T&amp;gt;는 null이 아닌 T타입 참조를 하나 담거나, 아무것도 담지 않을 수 있습니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://qutrits.github.io/java/effective-java-3e/chapter-07/item56/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qutrits.github.io/java/effective-java-3e/chapter-07/item56/</guid>
      <description>[아이템 56] 공개된 API 요소에는 항상 문서화 주석을 작성하라. javadocd이라는 유틸리티를 이용하면 소스코드 파일에서 문서화 주석이라는 특수한 형태로 기술된 설명을 추려 API 문서로 변환해줍니다.
메서드용 문서화 주석에는 해당 메서드와 클라이어트 사이의 규약을 명료하게 기술해야 합니다. 핵심 포인트는 how가 아닌 what입니다. 무엇을 하는지에 대한 설명이 있어야 합니다. 또한 메서드를 호출하기위한 조건, 수행된 후에 만족해야 하는 사후조건, 부작용도 모두 나열되어야 합니다. 잘 쓰인 문서인지 확인하는 유일한 방법은 자바독 유틸리티가 생성한 웹페이지를 읽어보는 길뿐입니다.</description>
    </item>
    
  </channel>
</rss>
