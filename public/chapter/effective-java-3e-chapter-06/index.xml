<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Effective Java 3E Chapter 06 on &lt;Qubqub/&gt;</title>
    <link>https://qubqub.github.io/chapter/effective-java-3e-chapter-06/</link>
    <description>Recent content in Effective Java 3E Chapter 06 on &lt;Qubqub/&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 02 Mar 2021 10:11:42 +0900</lastBuildDate><atom:link href="https://qubqub.github.io/chapter/effective-java-3e-chapter-06/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[아이템 42] 익명 클래스보다는 람다를 사용하라</title>
      <link>https://qubqub.github.io/effective-java-3e/chapter-06/item42/</link>
      <pubDate>Tue, 02 Mar 2021 10:11:42 +0900</pubDate>
      
      <guid>https://qubqub.github.io/effective-java-3e/chapter-06/item42/</guid>
      <description>[아이템 42] 익명 클래스보다는 람다를 사용하라. 자바 8부터는 함수형 프로그래밍을 지원합니다. 추상 메서드가 하나인(Single Abstract Method)인터페이스를 함수형 인터페이스라고 부르며 람다식을 사용해 만들 수 있습니다. 람다는 익명클래스에 비해 코드가 간결하고 가독성이 좋다는 장점이 있습니다.
1 2 3 4 5 6 7 // 익명 클래스 방식 Collections.sort(words, new Comparator&amp;lt;String&amp;gt;() { @Override public int compare(String s1, String s2) { return Interget.compare(s1.length(), s2.length()); } }); 1 2 3 // 람다 활용 Collections.sort(words, (s1, s2) -&amp;gt; Integer.</description>
    </item>
    
  </channel>
</rss>
